<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tie × Wiki</title>
  
  <subtitle>Later equals never</subtitle>
  <link href="https://wyatt.ink/atom.xml" rel="self"/>
  
  <link href="https://wyatt.ink/"/>
  <updated>2024-11-01T07:59:51.242Z</updated>
  <id>https://wyatt.ink/</id>
  
  <author>
    <name>wyatt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Selenium和Chromedriver自动化登录以提取会话Token</title>
    <link href="https://wyatt.ink/posts/Tools/1130652765.html"/>
    <id>https://wyatt.ink/posts/Tools/1130652765.html</id>
    <published>2024-11-01T07:57:10.000Z</published>
    <updated>2024-11-01T07:59:51.242Z</updated>
    
    <content type="html"><![CDATA[<p>结合使用selenium库和chromedriver，可以编写一个脚本来模拟用户实现登录过程：使用selenium启动Chrome浏览器，定位到登录页面中的用户名和密码输入框，自动填充账号和密码信息，接着触发登录按钮完成登录操作，登录成功后可提取该Token信息，以便后续的自动化操作或进行身份验证</p><span id="more"></span><h2 id="一、依赖安装"><a href="#一、依赖安装" class="headerlink" title="一、依赖安装"></a>一、依赖安装</h2><h3 id="1-1-软件版本"><a href="#1-1-软件版本" class="headerlink" title="1.1 软件版本"></a>1.1 软件版本</h3><table><thead><tr><th>软件</th><th>查看版本命令</th><th>信息</th></tr></thead><tbody><tr><td>Python</td><td>python3 -V</td><td>3.11.9 &#x2F; 3.9.9</td></tr><tr><td>Selenium</td><td>pip3 show selenium</td><td>4.26.1</td></tr><tr><td>chrome</td><td>google-chrome –version</td><td>130.0.6723.91</td></tr><tr><td>chromedriver</td><td>chromedriver –version</td><td>130.0.6723.91</td></tr></tbody></table><blockquote><p>   chrome与chromedriver版本最好保持一致</p></blockquote><h3 id="1-2-安装selenium"><a href="#1-2-安装selenium" class="headerlink" title="1.2 安装selenium"></a>1.2 安装selenium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure><h3 id="1-3-安装chrome"><a href="#1-3-安装chrome" class="headerlink" title="1.3 安装chrome"></a>1.3 安装chrome</h3><ul><li><p>下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y --enablerepo=base google-chrome-stable</span><br></pre></td></tr></table></figure><blockquote><p>如果自动下载GPG密钥失败，你可以尝试手动下载并安装它。使用以下命令：<code>wget https://dl.google.com/linux/linux_signing_key.pub</code>,<code>sudo rpm --import linux_signing_key.pub</code></p></blockquote></li><li><p>安装chrome</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4-安装chromedriver"><a href="#1-4-安装chromedriver" class="headerlink" title="1.4 安装chromedriver"></a>1.4 安装chromedriver</h3><ul><li>去<a href="https://googlechromelabs.github.io/chrome-for-testing/#stable">资源网站</a>根据chrome版本号，下载安装包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/chrome-for-testing-public/130.0.6723.91/linux64/chromedriver-linux64.zip</span><br></pre></td></tr></table></figure></li><li>解压移动资源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip chromedriver-linux64.zip</span><br><span class="line">cp chromedriver /usr/local/bin/</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、执行脚本"><a href="#二、执行脚本" class="headerlink" title="二、执行脚本"></a>二、执行脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你的登录信息</span></span><br><span class="line">USERNAME = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">URL = <span class="string">&#x27;http://127.0.0.1/#/login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定ChromeDriver的路径</span></span><br><span class="line">chromedriver_path = <span class="string">&#x27;/usr/local/bin/chromedriver&#x27;</span></span><br><span class="line">service = Service(executable_path=chromedriver_path)</span><br><span class="line"><span class="comment"># 指定Chrome浏览器的路径</span></span><br><span class="line">chrome_path = <span class="string">&#x27;/opt/google/chrome/chrome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化WebDriver，这里以Chrome为例</span></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)                <span class="comment"># 解决DevToolsActivePort文件不存在的报错          </span></span><br><span class="line">options.add_argument(<span class="string">&#x27;window-size=1920x3000&#x27;</span>)       <span class="comment"># 设置浏览器分辨率</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)               <span class="comment"># 谷歌文档提到需要加上这个属性来规避bug</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--hide-scrollbars&#x27;</span>)           <span class="comment"># 隐藏滚动条，应对一些特殊页面</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;blink-settings=imagesEnabled=false&#x27;</span>)      <span class="comment"># 不加载图片，提升运行速度</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)                  <span class="comment"># 浏览器不提供可视化界面。Linux下如果系统不支持可视化不加这条会启动失败</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(service=service, options=options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_info_from_local_storage</span>():</span><br><span class="line">    localStorageMap = &#123;&#125; </span><br><span class="line">    localStorageItems = driver.execute_script(<span class="string">&quot;return Object.keys(localStorage);&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(localStorageItems)  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> localStorageItems:</span><br><span class="line">        value = driver.execute_script(<span class="string">f&quot;return localStorage.getItem(&#x27;<span class="subst">&#123;key&#125;</span>&#x27;);&quot;</span>)</span><br><span class="line">        localStorageMap[key] = value</span><br><span class="line">    <span class="comment"># 打印Map的内容</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> localStorageMap.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 打开登录页面</span></span><br><span class="line">    driver.get(URL)</span><br><span class="line"><span class="comment"># 找到用户名和密码输入框，输入相应的信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定位用户名输入框并输入用户名</span></span><br><span class="line">    username_input = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>)</span><br><span class="line">    username_input.send_keys(USERNAME)  <span class="comment"># 替换为你的用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位密码输入框并输入密码</span></span><br><span class="line">    password_input = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.ivu-input.ivu-input-large[type=&quot;password&quot;]&#x27;</span>)</span><br><span class="line">    password_input.send_keys(PASSWORD)  <span class="comment"># 替换为你的密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到登录按钮并点击（需要根据实际页面元素进行调整）</span></span><br><span class="line">    login_button = driver.find_element(By.XPATH, <span class="string">&quot;//button[@type=&#x27;submit&#x27;]&quot;</span>)  <span class="comment"># 假设登录按钮有一个 type 属性为 &quot;submit&quot;</span></span><br><span class="line">    login_button.click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到登录按钮并点击</span></span><br><span class="line">    login_button = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;button[type=&quot;submit&quot;]&#x27;</span>)  <span class="comment"># 根据实际情况修改选择器</span></span><br><span class="line">    login_button.click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待页面加载完成</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 根据实际情况调整等待时间</span></span><br><span class="line">   </span><br><span class="line">    get_info_from_local_storage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭浏览器</span></span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ol><li>options某些参数若不设置可能会出现异常错误，例如SessionNotCreatedException等；</li><li>元素定位选择可尝试多种方式，若使用placeholder在Linux环境中not found.</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;结合使用selenium库和chromedriver，可以编写一个脚本来模拟用户实现登录过程：使用selenium启动Chrome浏览器，定位到登录页面中的用户名和密码输入框，自动填充账号和密码信息，接着触发登录按钮完成登录操作，登录成功后可提取该Token信息，以便后续的自动化操作或进行身份验证&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="https://wyatt.ink/categories/Tools/"/>
    
    
    <category term="Linux" scheme="https://wyatt.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>XJar加密jar包</title>
    <link href="https://wyatt.ink/posts/Code/1553197198.html"/>
    <id>https://wyatt.ink/posts/Code/1553197198.html</id>
    <published>2024-09-12T08:34:42.000Z</published>
    <updated>2024-09-12T08:47:52.447Z</updated>
    
    <content type="html"><![CDATA[<p>XJar 是一个用于加密 Spring Boot JAR 文件的工具，它同样也支持原生 JAR 文件。它通过加密 JAR 包内的资源和扩展 ClassLoader 的方式，实现了程序的加密启动和动态解密运行，以此来防止源码泄露和反编译。</p><p><strong>功能特性</strong>：</p><ul><li>无需侵入代码，只需对编译好的 JAR 包进行加密。</li><li>完全在内存中解密，减少了源码和字节码泄露或被反编译的风险。</li><li>支持所有 JDK 内置的加解密算法。</li><li>可以选择性地加密特定的字节码或其他资源文件，以避免不必要的计算资源浪费。</li><li>支持 Maven 插件，使得加密过程更加便捷。<span id="more"></span></li></ul><h3 id="一、添加Maven依赖"><a href="#一、添加Maven依赖" class="headerlink" title="一、添加Maven依赖"></a>一、添加Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.core-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xjar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.core-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>loadkit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>v1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可能需要将jar包方式安装到本地maven仓库</p></blockquote><h3 id="二、-生产加密jar包和go启动脚本"><a href="#二、-生产加密jar包和go启动脚本" class="headerlink" title="二、 生产加密jar包和go启动脚本"></a>二、 生产加密jar包和go启动脚本</h3><p>本地工程打成jar包后，使用如下逻辑将jar包加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.xjar.XCryptos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JarEncryption</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        XCryptos.encryption()</span><br><span class="line">                .from(<span class="string">&quot;E:\\codebase\\test\\test\\target\\test-v6.0.jar&quot;</span>)</span><br><span class="line">                .use(<span class="string">&quot;io.xjar&quot;</span>) <span class="comment">// 密码</span></span><br><span class="line">                .exclude(<span class="string">&quot;/static/**/*&quot;</span>) <span class="comment">// 排除的文件</span></span><br><span class="line">                .exclude(<span class="string">&quot;/initdata/**/*&quot;</span>)</span><br><span class="line">                .exclude(<span class="string">&quot;/templates/**/*&quot;</span>)</span><br><span class="line">                .exclude(<span class="string">&quot;/META-INF/resources/**/*&quot;</span>)</span><br><span class="line">                .to(<span class="string">&quot;E:\\codebase\\test\\test\\target\\test-encryption.jar&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意一些放置在resouce的资源文件加密后可能出现异常，根据情况进行排除</p></blockquote><p>执行完成后，以上例情况会生成：<code>test-encryption.jar</code>、<code>xjar.go</code>文件</p><h3 id="三、生成go启动器"><a href="#三、生成go启动器" class="headerlink" title="三、生成go启动器"></a>三、生成go启动器</h3><p>在机器中（需安装有go环境）执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build xjar.go</span><br></pre></td></tr></table></figure><p>得到文件<code>xjar</code></p><h3 id="四、启动加密jar包"><a href="#四、启动加密jar包" class="headerlink" title="四、启动加密jar包"></a>四、启动加密jar包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xjar java -jar test-encryption.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;XJar 是一个用于加密 Spring Boot JAR 文件的工具，它同样也支持原生 JAR 文件。它通过加密 JAR 包内的资源和扩展 ClassLoader 的方式，实现了程序的加密启动和动态解密运行，以此来防止源码泄露和反编译。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能特性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需侵入代码，只需对编译好的 JAR 包进行加密。&lt;/li&gt;
&lt;li&gt;完全在内存中解密，减少了源码和字节码泄露或被反编译的风险。&lt;/li&gt;
&lt;li&gt;支持所有 JDK 内置的加解密算法。&lt;/li&gt;
&lt;li&gt;可以选择性地加密特定的字节码或其他资源文件，以避免不必要的计算资源浪费。&lt;/li&gt;
&lt;li&gt;支持 Maven 插件，使得加密过程更加便捷。</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="deploy" scheme="https://wyatt.ink/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>iptables 重定向请求ip</title>
    <link href="https://wyatt.ink/posts/Code/446774027.html"/>
    <id>https://wyatt.ink/posts/Code/446774027.html</id>
    <published>2024-06-26T07:04:33.000Z</published>
    <updated>2024-09-12T08:47:40.104Z</updated>
    
    <content type="html"><![CDATA[<p>iptables 是 Linux 操作系统中一个功能强大的防火墙工具，它用于配置网络传输相关规则，以控制进入和离开系统的数据包。iptables 可以执行多种任务，包括过滤基于源&#x2F;目的 IP 地址、端口号、协议类型（如 TCP、UDP）等条件的数据包，以及实现网络地址转换（NAT）、包内容修改等高级功能。</p><blockquote><p>将请求192.168.0.31的请求重定向至127.0.0.1</p></blockquote><span id="more"></span><h3 id="一、测试最终IP访问"><a href="#一、测试最终IP访问" class="headerlink" title="一、测试最终IP访问"></a>一、测试最终IP访问</h3><ul><li><code>curl http:/127.0.0.1:8080</code></li></ul><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><ul><li><p>查看原iptables规则 <code>sudo iptables -L -n</code></p></li><li><p>启用 IP 转发功能 <code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code></p></li><li><p>允许本地路由 <code>sysctl -w net.ipv4.conf.all.route_localnet=1</code></p></li><li><p>tcp流量重定向  <code>iptables -t nat -A OUTPUT -p tcp -d 192.168.0.31 --dport 8080 -j DNAT --to-destination 127.0.0.1</code></p><blockquote><p>可选参数 –dport 8080</p></blockquote></li><li><p>返回流量重定向 <code>iptables -t nat -A INPUT -p tcp --sport 8080 -j SNAT --to-source 192.168.0.31</code></p><blockquote><p>可选参数 –sport 8080</p></blockquote></li></ul><h3 id="三、测试重定向ip访问"><a href="#三、测试重定向ip访问" class="headerlink" title="三、测试重定向ip访问"></a>三、测试重定向ip访问</h3><ul><li><code>curl http://192.168.0.31:8080</code></li></ul><h3 id="四、持久化"><a href="#四、持久化" class="headerlink" title="四、持久化"></a>四、持久化</h3><ul><li>保存规则 <code>sudo iptables-save &gt; /root/.iptables.rules</code></li><li>恢复规则 <code>sudo iptables-restore &lt; /root/.iptables.rules</code></li><li>机器启动时自动恢复 <code>echo &quot;iptables-restore &lt; /root/.iptables.rules&quot; &gt;&gt; /etc/rc.local</code></li></ul><blockquote><p>当前方法可能会对docker内部网络通信产生影响，进而导致容器产生异常，手动重启容器，故需要观察使用是否会产生影响</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;iptables 是 Linux 操作系统中一个功能强大的防火墙工具，它用于配置网络传输相关规则，以控制进入和离开系统的数据包。iptables 可以执行多种任务，包括过滤基于源&amp;#x2F;目的 IP 地址、端口号、协议类型（如 TCP、UDP）等条件的数据包，以及实现网络地址转换（NAT）、包内容修改等高级功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将请求192.168.0.31的请求重定向至127.0.0.1&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="Linux" scheme="https://wyatt.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础命令</title>
    <link href="https://wyatt.ink/posts/Code/1521035310.html"/>
    <id>https://wyatt.ink/posts/Code/1521035310.html</id>
    <published>2024-06-16T02:12:10.000Z</published>
    <updated>2024-09-12T09:05:00.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-docker-容器创建用户命令"><a href="#1-docker-容器创建用户命令" class="headerlink" title="1. docker 容器创建用户命令"></a>1. docker 容器创建用户命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo-container-name mongosh;</span><br><span class="line"></span><br><span class="line">use admin;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建管理员账户</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: &#x27;admin1&#x27;,</span><br><span class="line">  pwd: &#x27;admin&#x27;,</span><br><span class="line">  roles: [&#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>创建普通用户时：则先切换到对应数据库，db填对应名称  </p></blockquote><span id="more"></span><h3 id="2-docker-导入导出数据"><a href="#2-docker-导入导出数据" class="headerlink" title="2. docker 导入导出数据"></a>2. docker 导入导出数据</h3><h4 id="2-1-导出指定集合"><a href="#2-1-导出指定集合" class="headerlink" title="2.1 导出指定集合"></a>2.1 导出指定集合</h4><p>若容器部署，进入容器中，不需要进入特定目录，直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport --db yourDatabaseName --collection yourCollectionName --out yourOutputFileName.json</span><br></pre></td></tr></table></figure><ul><li><code>--authenticationDatabase</code>: 验证用户名密码所需的数据库（默认为admin）</li><li><code>-u</code> 用户名 </li><li><code>-p</code> 密码</li><li><code>-d</code> 数据库</li><li><code>-c</code> 集合</li><li><code>--db</code> 指定数据库名称。</li><li><code>--collection</code> 指定集合名称。</li><li><code>--out</code> 指定输出文件的名称。</li><li>默认也可在容器 <code>/data/db</code>目录下执行</li></ul><blockquote><p><strong>举例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">mongoexport --db iPaaS_Dev --collection AppMenuItemConfig --out AppMenuItemConfig.json</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">mongoexport -h 127.0.0.1 --authenticationDatabase admin -u dp001 -p dp01pd!02</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">-d dmp -c tm -o dmp-tm.json</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-2-导出整个集合"><a href="#2-2-导出整个集合" class="headerlink" title="2.2 导出整个集合"></a>2.2 导出整个集合</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump --db yourDatabaseName --out yourOutputDirectory</span><br></pre></td></tr></table></figure><ul><li><code>--db</code> 后面跟着的是要导出的数据库名称。</li><li><code>--out</code> 后面跟着的是你希望存储导出文件的目录路径。</li></ul><blockquote><p><strong>举例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">mongodump --db yourDatabaseName --out yourOutputDirectory</span></span><br></pre></td></tr></table></figure><p>导出的是非Array, 需手动加入前后 “[“、”]”, 并在各个entry之间加入 “,”   另外可能多出 “_id”:{“$oid”:”66de6dd2ad52db6cb33d39b8”}” 属性，根据需要去除</p></blockquote><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h3><ul><li><p>查询<strong>P_AppMenuItemConfig</strong>集合中menuName字段值为<code>概览</code>和<code>详细</code>的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">P_AppMenuItemConfig</span>.<span class="title function_">find</span>(&#123; <span class="string">&quot;menuName&quot;</span>: &#123; <span class="string">&quot;$in&quot;</span>: [<span class="string">&quot;概览&quot;</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">myCollection</span>.<span class="title function_">insertOne</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;field2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">myCollection</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;field2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;field2&quot;</span>: <span class="string">&quot;value4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... 更多文档</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></li><li><p>多个查询条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">P_AppMenuItemConfig</span>.<span class="title function_">find</span>(</span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">$and</span>: </span><br><span class="line">    [    </span><br><span class="line">        &#123; <span class="string">&quot;menuName&quot;</span>: &#123; <span class="string">&quot;$in&quot;</span>: [<span class="string">&quot;请求数据转换&quot;</span>,<span class="string">&quot;响应数据转换&quot;</span>]  &#125; &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;creator&quot;</span>: &#123; <span class="string">&quot;$in&quot;</span>: [<span class="string">&quot;admin&quot;</span>] &#125; &#125;</span><br><span class="line">    ] </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含使用： $nin</span></span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">P_CategoryType</span>.<span class="title function_">updateMany</span>(</span><br><span class="line">    &#123; creatorName : <span class="string">&quot;管理员&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">$set</span>: &#123; <span class="attr">creatorName</span>: <span class="string">&quot;管理员1&quot;</span> &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">deleteMany</span>(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125; &#125;);</span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">deleteMany</span>(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125; &#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-docker-容器创建用户命令&quot;&gt;&lt;a href=&quot;#1-docker-容器创建用户命令&quot; class=&quot;headerlink&quot; title=&quot;1. docker 容器创建用户命令&quot;&gt;&lt;/a&gt;1. docker 容器创建用户命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker exec -it mongo-container-name mongosh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use admin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;创建管理员账户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.createUser(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user: &amp;#x27;admin1&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pwd: &amp;#x27;admin&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles: [&amp;#123; role: &amp;#x27;userAdminAnyDatabase&amp;#x27;, db: &amp;#x27;admin&amp;#x27; &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;创建普通用户时：则先切换到对应数据库，db填对应名称  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="DB" scheme="https://wyatt.ink/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>List转树形结构</title>
    <link href="https://wyatt.ink/posts/Airthmetic/2142818560.html"/>
    <id>https://wyatt.ink/posts/Airthmetic/2142818560.html</id>
    <published>2022-04-25T06:26:00.000Z</published>
    <updated>2022-04-25T15:28:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据List中实体的id 、父级id构建树形结构</p><ul><li>取出一个元素</li><li>遍历整个List</li><li>若找到元素父级，则将元素设为其child</li><li>同时此元素进行标记</li><li>删除所有已标记元素<span id="more"></span></li></ul><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String divCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String divParentCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String divName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DivEntity&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//contructor</span></span><br><span class="line">    <span class="comment">//setter</span></span><br><span class="line">    <span class="comment">//getter</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建方法"><a href="#构建方法" class="headerlink" title="构建方法"></a>构建方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBuildTree</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;DivEntity&gt; treeNodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;陕西省&quot;</span>));</span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;21&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;西安市&quot;</span>));</span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;211&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;雁塔区&quot;</span>));</span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;212&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;未央区&quot;</span>));</span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;2121&quot;</span>, <span class="string">&quot;212&quot;</span>, <span class="string">&quot;浐灞&quot;</span>));</span><br><span class="line"></span><br><span class="line">    treeNodes.add(<span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;11&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;成都市&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 标志位，标记是否已经作为子节点</span></span><br><span class="line">    <span class="type">int</span>[] treeNodeFlag = <span class="keyword">new</span> <span class="title class_">int</span>[treeNodes.size()];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历list</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; treeNodes.size(); i++) &#123;</span><br><span class="line">        <span class="type">DivEntity</span> <span class="variable">treeNode</span> <span class="operator">=</span> treeNodes.get(i);</span><br><span class="line">        <span class="comment">//如果元素不位于顶级</span></span><br><span class="line">        <span class="keyword">if</span>(treeNode.getDivParentCode() != <span class="literal">null</span> &amp;&amp; !treeNode.getDivParentCode().equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//再次遍历List</span></span><br><span class="line">            <span class="keyword">for</span> (DivEntity parentNode : treeNodes) &#123;</span><br><span class="line">                <span class="comment">//在整个list中查找元素的父级</span></span><br><span class="line">                <span class="keyword">if</span>(treeNode.getDivParentCode().equals(parentNode.getDivCode()))&#123;</span><br><span class="line">                    <span class="comment">//将元素放入父级中,若其子树结构为空则先创建子树再加节点</span></span><br><span class="line">                    <span class="keyword">if</span>(parentNode.getChildren() == <span class="literal">null</span>)&#123;</span><br><span class="line">                        parentNode.setChildren(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    parentNode.getChildren().add(treeNode);</span><br><span class="line">                    <span class="comment">// 如果变为子节点则标记</span></span><br><span class="line">                    treeNodeFlag[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除已经作为子节点的节节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; treeNodeFlag.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(treeNodeFlag[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            treeNodes.set(i, <span class="keyword">new</span> <span class="title class_">DivEntity</span>(<span class="string">&quot;-9999&quot;</span>, <span class="string">&quot;-9999&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNodes.removeIf(treeNode -&gt;treeNode.getDivCode().equals(<span class="string">&quot;-9999&quot;</span>) &amp;&amp; treeNode.getDivParentCode().equals(<span class="string">&quot;-9999&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJSONString(treeNodes) = &quot;</span> + JSON.toJSONString(treeNodes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class = "reference" href="https://blog.csdn.net/beidaol/article/details/93717986">https://blog.csdn.net/beidaol/article/details/93717986</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;根据List中实体的id 、父级id构建树形结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取出一个元素&lt;/li&gt;
&lt;li&gt;遍历整个List&lt;/li&gt;
&lt;li&gt;若找到元素父级，则将元素设为其child&lt;/li&gt;
&lt;li&gt;同时此元素进行标记&lt;/li&gt;
&lt;li&gt;删除所有已标记元素</summary>
    
    
    
    <category term="Airthmetic" scheme="https://wyatt.ink/categories/Airthmetic/"/>
    
    
    <category term="JavaSE" scheme="https://wyatt.ink/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中空间函数的使用</title>
    <link href="https://wyatt.ink/posts/Code/be61cedf.html"/>
    <id>https://wyatt.ink/posts/Code/be61cedf.html</id>
    <published>2021-09-10T10:59:10.000Z</published>
    <updated>2024-06-06T02:10:45.325Z</updated>
    
    <content type="html"><![CDATA[<p>GeoHash是一种地址编码方式，能够将二维经纬度数据转换为一个字符串</p><h2 id="Mysql中的使用"><a href="#Mysql中的使用" class="headerlink" title="Mysql中的使用"></a>Mysql中的使用</h2><p>MySql在<strong>5.7及以上版本</strong>中支持了GeoHash相关函数</p><span id="more"></span><p>数据结构：</p><table><thead><tr><th></th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>POINT</td><td>POINT(120 30)</td><td>点，常表示坐标</td></tr><tr><td>LINESTRING</td><td>LineString(84.070 33.801,99.52 30.292)</td><td>线，常表示路径信息</td></tr><tr><td>POLYGON</td><td>POLYGON((120 30, 121 31, 122 32, 120 30))</td><td>多边形，常表示区域信息</td></tr></tbody></table><blockquote><p>多边形为封闭图形，首位点坐标保持一致</p></blockquote><h3 id="二维坐标转geohas函数ST-GEOMFROMTEXT"><a href="#二维坐标转geohas函数ST-GEOMFROMTEXT" class="headerlink" title="二维坐标转geohas函数ST_GEOMFROMTEXT"></a>二维坐标转geohas函数ST_GEOMFROMTEXT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 常量</span></span><br><span class="line"><span class="keyword">SELECT</span> (ST_GEOMFROMTEXT(<span class="string">&#x27;POINT(120,19)&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变量</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ST_GEOMFROMTEXT(CONCAT(<span class="string">&#x27;POINT(&#x27;</span>,longitude,<span class="string">&#x27; &#x27;</span>,latitude,<span class="string">&#x27;)&#x27;</span>) </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    coordinates_table <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="查询两点之间距离"><a href="#查询两点之间距离" class="headerlink" title="查询两点之间距离"></a>查询两点之间距离</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_Distance(POINT(<span class="number">1</span>,<span class="number">2</span>),POINT(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ST_Distance(POINT(<span class="number">1</span>,<span class="number">2</span>),POINT(<span class="number">2</span>,<span class="number">2</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br></pre></td></tr></table></figure><h3 id="查询一个几何形状是否完全包含另一个几何形状"><a href="#查询一个几何形状是否完全包含另一个几何形状" class="headerlink" title="查询一个几何形状是否完全包含另一个几何形状"></a>查询一个几何形状是否完全包含另一个几何形状</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 0: 不包含  1: 包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 常量</span></span><br><span class="line"><span class="keyword">SELECT</span>  MBRContains(</span><br><span class="line">        ST_GEOMFROMTEXT(<span class="string">&#x27;POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))&#x27;</span>),</span><br><span class="line">        ST_GEOMFROMTEXT(<span class="string">&#x27;POINT(174 149)&#x27;</span>) </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变量</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    MBRContains(</span><br><span class="line">        ST_GEOMFROMTEXT(CONCAT(<span class="string">&#x27;POLYGON( ( &#x27;</span>, #&#123;wkt&#125;,<span class="string">&#x27; ) )&#x27;</span>)),</span><br><span class="line">        ST_GEOMFROMTEXT(CONCAT(<span class="string">&#x27;POINT(&#x27;</span>,plaza.baidu_lng,<span class="string">&#x27; &#x27;</span>,plaza.baidu_lat,<span class="string">&#x27;)&#x27;</span>)) </span><br><span class="line">    )</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    coordinates_table <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><br><br><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>➱ <a href="https://www.jianshu.com/p/2fd0cf12e5ba">https://www.jianshu.com/p/2fd0cf12e5ba</a><br>➱ <a href="https://www.jianshu.com/p/2fd0cf12e5ba">https://www.jianshu.com/p/2fd0cf12e5ba</a><br>➱ <a href="https://juejin.cn/post/7003165795857465374">https://juejin.cn/post/7003165795857465374</a><br>➱ <a href="https://mariadb.com/kb/en/geometry-relations/">https://mariadb.com/kb/en/geometry-relations/</a></p><p><img src="https://cdn.jsdelivr.net/gh/ThisisWyatt/GitakRepository@master/001Q9HNlgy1h0pp70lotoj61hb0u041v02.jpg" alt="001Q9HNlgy1h0pp70lotoj61hb0u041v02"></p><p><img src="https://cdn.jsdelivr.net/gh/ThisisWyatt/GitakRepository@master/static_files/blog/img/%E6%9C%88%E7%90%83%E5%96%B7%E6%B0%94%E6%9C%BA.jpg" alt="月球喷气机"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GeoHash是一种地址编码方式，能够将二维经纬度数据转换为一个字符串&lt;/p&gt;
&lt;h2 id=&quot;Mysql中的使用&quot;&gt;&lt;a href=&quot;#Mysql中的使用&quot; class=&quot;headerlink&quot; title=&quot;Mysql中的使用&quot;&gt;&lt;/a&gt;Mysql中的使用&lt;/h2&gt;&lt;p&gt;MySql在&lt;strong&gt;5.7及以上版本&lt;/strong&gt;中支持了GeoHash相关函数&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="DB" scheme="https://wyatt.ink/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Nacos的安装</title>
    <link href="https://wyatt.ink/posts/Code/33eafbe0.html"/>
    <id>https://wyatt.ink/posts/Code/33eafbe0.html</id>
    <published>2021-08-13T08:23:24.000Z</published>
    <updated>2022-08-22T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nacos是Alibaba推出的一款用于发现、配置和管理的一款中间件，它提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><span id="more"></span><h2 id="一、下载源码或安装包"><a href="#一、下载源码或安装包" class="headerlink" title="一、下载源码或安装包"></a>一、下载源码或安装包</h2><h3 id="1-1-从-Github-上下载源码方式"><a href="#1-1-从-Github-上下载源码方式" class="headerlink" title="1.1 从 Github 上下载源码方式"></a>1.1 从 Github 上下载源码方式</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/alibaba/nacos.git</span><br><span class="line">$ cd nacos/</span><br><span class="line">$ mvn -Prelease-nacos <span class="attr">-Dmaven.test.skip</span>=<span class="literal">true</span> clean install -U  </span><br><span class="line">$ ls -al distribution/target/</span><br><span class="line"></span><br><span class="line">// change the $version to your actual path</span><br><span class="line">cd distribution/target/nacos-server-$version/nacos/bin</span><br></pre></td></tr></table></figure><h3 id="1-2-下载编译后压缩包方式"><a href="#1-2-下载编译后压缩包方式" class="headerlink" title="1.2 下载编译后压缩包方式"></a>1.2 下载编译后压缩包方式</h3><p>先<a href="https://github.com/alibaba/nacos/releases">下载</a>编译后的压缩包，然后解压到本地目录。</p><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><h3 id="2-1-配置数据库"><a href="#2-1-配置数据库" class="headerlink" title="2.1 配置数据库"></a>2.1 配置数据库</h3><p>登录Mysql，建立名称为nacos的数据库，执行conf目录下的nacos-mysql.sql文件，执行完后数据库中应有如下表：<br><img src="https://i.loli.net/2021/08/13/AkMncpg5iLbdV3H.png" alt="nacos-mysql.sql"></p><h3 id="2-2-修改配置配置文件"><a href="#2-2-修改配置配置文件" class="headerlink" title="2.2 修改配置配置文件"></a>2.2 修改配置配置文件</h3><p>进入到nacos的conf目录下，修改application.properties文件<br><img src="https://i.loli.net/2021/08/13/opAYq8syZnMQCKD.png" alt="nacos_applicaton_properties"><br>进入到nacos的bin目录下，修改startup.cmd文件<br><img src="https://s1.ax1x.com/2022/08/22/v6DR29.png" alt="nacos_startup_cmd"></p><h3 id="2-3-启动nacos"><a href="#2-3-启动nacos" class="headerlink" title="2.3 启动nacos"></a>2.3 启动nacos</h3><p>进入nacos的bin目录下，运行startup.cmd<br><img src="https://i.loli.net/2021/08/13/EhrUZHDAOa8sdef.png" alt="nacos_startup.cmd"></p><h3 id="2-4-访问nacos图形化界面"><a href="#2-4-访问nacos图形化界面" class="headerlink" title="2.4 访问nacos图形化界面"></a>2.4 <a href="http://localhost:8848/nacos/#/login">访问nacos图形化界面</a></h3><p><img src="https://i.loli.net/2021/08/13/pmwo1LFcA7IPirC.png" alt="nacos图形化界面"></p><blockquote><p>初始用户名和密码：nacos&#x2F;nacos</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>➱ <a href="https://nacos.io/">https://nacos.io</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nacos是Alibaba推出的一款用于发现、配置和管理的一款中间件，它提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="Microservices" scheme="https://wyatt.ink/tags/Microservices/"/>
    
  </entry>
  
  <entry>
    <title>Java函数式编程</title>
    <link href="https://wyatt.ink/posts/Code/7766f413.html"/>
    <id>https://wyatt.ink/posts/Code/7766f413.html</id>
    <published>2021-08-12T08:42:10.000Z</published>
    <updated>2022-05-11T11:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用函数式编程风格（lambda表达式、方法引用）对字符串数组进行排序。</p><span id="more"></span><h2 id="一、普通编程风格"><a href="#一、普通编程风格" class="headerlink" title="一、普通编程风格"></a>一、普通编程风格</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;wyatt2&quot;</span>, <span class="string">&quot;wyatt1&quot;</span>, <span class="string">&quot;wyatt3&quot;</span>);</span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、函数式编程风格"><a href="#二、函数式编程风格" class="headerlink" title="二、函数式编程风格"></a>二、函数式编程风格</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;wyatt2&quot;</span>, <span class="string">&quot;wyatt1&quot;</span>, <span class="string">&quot;wyatt3&quot;</span>);</span><br><span class="line"><span class="comment">// 普通Lambda表达式</span></span><br><span class="line">Collections.sort(names, (String a, String b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 省略return </span></span><br><span class="line">Collections.sort(names, (String a, String b) -&gt; a.compareTo(b));</span><br><span class="line"><span class="comment">// 省略入参类型</span></span><br><span class="line">Collections.sort(names, (a,  b) -&gt; a.compareTo(b));</span><br><span class="line"><span class="comment">// 使用方法引用（compareTo()是String类的方法</span></span><br><span class="line">Collections.sort(names, String::compareTo);</span><br><span class="line"><span class="comment">// 也可使用List自身方法</span></span><br><span class="line">names.sort(String::compareTo);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用函数式编程风格（lambda表达式、方法引用）对字符串数组进行排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="JavaSE" scheme="https://wyatt.ink/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>多线程生成随机数并计算重复个数</title>
    <link href="https://wyatt.ink/posts/Code/cbb36818.html"/>
    <id>https://wyatt.ink/posts/Code/cbb36818.html</id>
    <published>2021-08-12T06:23:24.000Z</published>
    <updated>2022-04-21T08:20:53.907Z</updated>
    
    <content type="html"><![CDATA[<p>使用InStream的多线程方法向synchronizedList中插入若干个随机数，并计算其中重复的个数。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numberList = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">100</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">    numberList.add(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>));</span><br><span class="line">&#125;);</span><br><span class="line">List&lt;Integer&gt; filterNumberList = numberList.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;numberList.size = &quot;</span> + numberList.size());</span><br><span class="line">System.out.println(<span class="string">&quot;filterNumberList.size = &quot;</span> + filterNumberList.size());</span><br><span class="line">System.out.println(<span class="string">&quot;重复个数：&quot;</span> + (numberList.size() - filterNumberList.size()));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用InStream的多线程方法向synchronizedList中插入若干个随机数，并计算其中重复的个数。&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="Multi-Thread" scheme="https://wyatt.ink/tags/Multi-Thread/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot文件上传</title>
    <link href="https://wyatt.ink/posts/Code/1a4a828a.html"/>
    <id>https://wyatt.ink/posts/Code/1a4a828a.html</id>
    <published>2021-05-21T04:20:10.000Z</published>
    <updated>2022-04-21T08:20:21.501Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot文件上传</p><span id="more"></span><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResultMessage <span class="title function_">saveFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ResultMessage</span> <span class="variable">resultMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultMessage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//获取文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="comment">//设置存储文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadFilePath</span> <span class="operator">=</span> PropertiesUtil.prop(<span class="string">&quot;filePath&quot;</span>);</span><br><span class="line">            <span class="comment">//根据文件名称和文件路径新建一个空文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileToStorage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadFilePath + uploadFileName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//将上传文件写入到指定空文件中</span></span><br><span class="line">                file.transferTo(fileToStorage);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                resultMessage.setCode(<span class="string">&quot;400&quot;</span>);</span><br><span class="line">                resultMessage.setMessage(<span class="string">&quot;文件上传失败，请检查文件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//存储成功，则设置状态相应相应</span></span><br><span class="line">            resultMessage.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">            resultMessage.setMessage(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resultMessage.setCode(<span class="string">&quot;400&quot;</span>);</span><br><span class="line">            resultMessage.setMessage(<span class="string">&quot;文件上传失败，请检查文件是否为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultMessage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring Boot文件上传&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="JavaWeb" scheme="https://wyatt.ink/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Docker command</title>
    <link href="https://wyatt.ink/posts/Tools/8f5fd259.html"/>
    <id>https://wyatt.ink/posts/Tools/8f5fd259.html</id>
    <published>2021-03-20T03:54:34.000Z</published>
    <updated>2024-09-23T04:52:59.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker的基本使用和管理"><a href="#一、Docker的基本使用和管理" class="headerlink" title="一、Docker的基本使用和管理"></a>一、Docker的基本使用和管理</h2><h3 id="1-1-安装docker"><a href="#1-1-安装docker" class="headerlink" title="1.1 安装docker"></a>1.1 安装docker</h3><ol><li><p>下载安装包</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.docker.com/linux/static/stable/x86_64/docker-18.06.1-ce.tgz</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol start="2"><li><p>创建系统配置文件 <code>vim ~/docker.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Docker Application Container Engine</span><br><span class="line"><span class="attr">Documentation</span>=https://docs.docker.com</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target firewalld.service</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd</span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=infinity</span><br><span class="line"><span class="attr">LimitNPROC</span>=infinity</span><br><span class="line"><span class="attr">LimitCORE</span>=infinity</span><br><span class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="comment">#TasksMax=infinity</span></span><br><span class="line"><span class="attr">TimeoutStartSec</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line"><span class="attr">Delegate</span>=<span class="literal">yes</span></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"><span class="comment"># restart the docker process if it exits prematurely</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">StartLimitBurst</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">StartLimitInterval</span>=<span class="number">60</span>s</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装脚本 <code>vim docker_install.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">echo &#x27;解压tar包...&#x27;</span><br><span class="line">sudo tar -xvf $1</span><br><span class="line">echo &#x27;将docker目录移到/usr/bin目录下...&#x27;</span><br><span class="line">sudo cp docker/* /usr/bin/</span><br><span class="line">echo &#x27;将docker.service 移到/etc/systemd/system/ 目录...&#x27;</span><br><span class="line">sudo cp ~/docker.service /etc/systemd/system/</span><br><span class="line">echo &#x27;添加文件权限...&#x27;</span><br><span class="line">sudo chmod +x /etc/systemd/system/docker.service</span><br><span class="line">echo &#x27;重新加载配置文件...&#x27;</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">echo &#x27;启动docker...&#x27;</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">echo &#x27;设置开机自启...&#x27;</span><br><span class="line">sudo systemctl enable docker.service</span><br><span class="line">echo &#x27;docker安装成功...&#x27;</span><br><span class="line">sudo docker -v</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件 <code>sudo vim /etc/docker/daemon.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>:[<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="comment">#&quot;graph&quot;: &quot;/data/docker&quot; #可选，自定义镜像和容器存储目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh docker_install docker-18.06.1-ce.tgz</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;删除docker.service...&#x27;</span></span><br><span class="line"><span class="built_in">rm</span> -f /etc/systemd/system/docker.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;删除docker文件...&#x27;</span></span><br><span class="line"><span class="built_in">rm</span> -rf /usr/bin/docker*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;重新加载配置文件&#x27;</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;卸载成功...&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-Docker镜像操作"><a href="#1-2-Docker镜像操作" class="headerlink" title="1.2 Docker镜像操作"></a>1.2 Docker镜像操作</h3><ul><li><p>搜索镜像 <code>docker search keyword</code></p></li><li><p>获取镜像 <code>docker pull imageName</code></p></li><li><p>查看镜像信息 <code>docker iamges</code></p><ul><li><p>REPOSITORY：镜像所属的仓库</p></li><li><p>TAG：镜像的标签信息，用于标记同一仓库的不同镜像</p><blockquote><p>为了方便使用镜像，可以使用<code>docker tag 名称:[标签] 新名称:[新标签]</code></p></blockquote></li><li><p>IMAGE ID：镜像的唯一ID号</p></li></ul><blockquote><p>可通过ID号来获取对应镜像信息：<code>docker inspect id</code></p></blockquote></li></ul><!-- more --><ul><li><p>删除镜像 <code>docker rmi 仓库名称:标签 | ID号</code></p></li><li><p>存出镜像 <code>docker save -o 存出文件名 存出的镜像</code></p></li><li><p>载入镜像 <code>docker load &lt; | -i 目标镜像文件</code></p></li><li><p>上传镜像 </p><ul><li>打上私有的标签 <code>docker tag 名称:[标签] 新名称:[新标签]</code></li><li>上传 <code>docker push 仓库名称:标签</code></li></ul></li></ul><h3 id="1-3-Docker容器操作"><a href="#1-3-Docker容器操作" class="headerlink" title="1.3 Docker容器操作"></a>1.3 Docker容器操作</h3><ul><li>创建 <code>docker create [OPTIONS] 镜像 运行的程序</code><blockquote><p><code>docker crate -it hivemq/hivemq4 /bin/bash</code></p></blockquote><ul><li>-i：让容器的输入保持打开状态</li><li>-t：让Docker分配一个伪终端</li></ul></li><li>查看容器运行状态 <code>docker ps -a</code></li><li>启动容器 <code>docker start 容器ID | 名称</code></li><li>创建并运行容器 <code>docker [OPTIONS] run 仓库名称:标签</code><blockquote><ul><li>-d 后台运行</li><li>–name：自定义一个名称</li><li>-p：指定端口映射，指定容器端口映射到主机端口，<code>主机端口:容器端口</code></li><li>-P：随机端口映射，容器内部端口映射到主机的一个随机端口</li><li>-e：设置相关环境变量</li><li>TZ:设置容器内时区，例如<code>TZ=&quot;Asia/Shanghai&quot;</code></li><li>-v：设置数据卷       <ul><li>创建数据卷：<code>-v 目录</code></li><li>创建数据卷并挂载到主机目录： <code>-v 宿主机目录:容器数据卷目录</code></li><li>挂载数据卷容器：<code>--volumes-from 容器名</code></li></ul></li></ul></blockquote></li><li>容器的进入 <code>docker exec -it 容器ID | 名称 /bin/bash</code><blockquote><p>容器是一个与其中运行的shell命令共存亡的众安，shell命令运行则容器运行，shell命令停止则容器停止，使用exit命令会在退出容器的同时关闭容器（但可以docker ps、docker restart恢复），所以使用<code>ctrl+P &amp; ctrl + Q</code>可以退出容器</p></blockquote></li><li>容器终止运行 <code>docker stop 容器ID | 名称</code></li><li>容器导出 <code>docker export 容器ID | 名称 &gt; 文件名</code></li><li>容器导入 <code>cat 文件名 | docker import - 生成镜像名称:标签</code></li><li>容器的删除 <code>docker rm 容器ID | 名称</code></li></ul><br><h3 id="1-4-容器拷贝文件"><a href="#1-4-容器拷贝文件" class="headerlink" title="1.4 容器拷贝文件"></a>1.4 容器拷贝文件</h3><ul><li>从容器复制文件到主机<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 023ed1bab:usr/local/tomcat/README.md ./</span><br></pre></td></tr></table></figure></li><li>从主机复制文件到容器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp ./README.md 023ed1bab:usr/local/tomcat/</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4-容器重命名"><a href="#1-4-容器重命名" class="headerlink" title="1.4 容器重命名"></a>1.4 容器重命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename oldname newname</span><br></pre></td></tr></table></figure><h3 id="1-5-更新现有容器的重启策略"><a href="#1-5-更新现有容器的重启策略" class="headerlink" title="1.5 更新现有容器的重启策略"></a>1.5 更新现有容器的重启策略</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=&lt;策略选项&gt; &lt;容器名称或ID&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;策略选项&gt;</code> 替换为 <code>no</code>、<code>always</code>、<code>on-failure</code> 或 <code>unless-stopped</code> 中的一个，根据需求选择</p><ul><li><code>no</code>：容器不会自动重启（默认值）。</li><li><code>always</code>：容器总是在退出时重启。</li><li><code>on-failure</code>：仅当容器以非零状态退出时才重启。</li><li><code>unless-stopped</code>：容器总是在退出时重启，除非它已被手动停止。</li></ul></blockquote><hr><p><br><br></p><h2 id="二、Docker安装常用应用"><a href="#二、Docker安装常用应用" class="headerlink" title="二、Docker安装常用应用"></a>二、Docker安装常用应用</h2><h3 id="2-1-docker-安装-kafka"><a href="#2-1-docker-安装-kafka" class="headerlink" title="2.1 docker 安装 kafka"></a>2.1 docker 安装 kafka</h3><h4 id="2-1-1-安装-zookeeper"><a href="#2-1-1-安装-zookeeper" class="headerlink" title="2.1.1 安装 zookeeper"></a>2.1.1 安装 zookeeper</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always --log-driver json-file \</span><br><span class="line">--log-opt max-size=<span class="number">100</span>m \</span><br><span class="line">--log-opt max-file=<span class="number">2</span>  \</span><br><span class="line">--name zookeeper-test -p <span class="number">21811</span>:<span class="number">2181</span> \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">wurstmeister/zookeeper:latest</span><br></pre></td></tr></table></figure><h4 id="2-1-2-安装-kafka"><a href="#2-1-2-安装-kafka" class="headerlink" title="2.1.2 安装 kafka"></a>2.1.2 安装 kafka</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--log-driver json-file \</span><br><span class="line">--log-opt max-size=<span class="number">100</span>m \</span><br><span class="line">--log-opt max-file=<span class="number">2</span> \</span><br><span class="line">--name kafka-test \</span><br><span class="line">-p <span class="number">9092</span>:<span class="number">9092</span> \</span><br><span class="line">-e KAFKA_BROKER_ID=<span class="number">0</span> \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=<span class="number">192</span>.<span class="number">168</span>.<span class="number">124</span>.<span class="number">248</span>:<span class="number">21811</span> \</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<span class="number">192</span>.<span class="number">168</span>.<span class="number">124</span>.<span class="number">248</span>:<span class="number">9092</span> \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">9092</span> \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure><h3 id="2-2-安装gogs"><a href="#2-2-安装gogs" class="headerlink" title="2.2 安装gogs"></a>2.2 安装gogs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 10022:22 -p 13000:3000 -v /data/gogs:/data --name gogs-test gogs/gogs:0.13</span><br></pre></td></tr></table></figure><h3 id="2-3-安装-EMQX"><a href="#2-3-安装-EMQX" class="headerlink" title="2.3 安装 EMQX"></a>2.3 安装 EMQX</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local/emqx_auth_http.conf:/opt/emqx/etc/plugins/emqx_auth_http.conf \</span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local/emqx_retainer.conf:/opt/emqx/etc/plugins/emqx_retainer.conf  \</span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local/emqx_auth_username.conf:/opt/emqx/etc/plugins/emqx_auth_username.conf  \</span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local/emqx.conf:/opt/emqx/etc/emqx.conf  \</span><br><span class="line">-p 11883:11883 -p 18083:18083 -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8084:8084 -p 8883:8883 \</span><br><span class="line">--name emqx-local \</span><br><span class="line">emqx/emqx:4.2.0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d </span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local-link5g-dmp/emqx_auth_http.conf:/opt/emqx/etc/plugins/emqx_auth_http.conf </span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local-link5g-dmp/emqx_retainer.conf:/opt/emqx/etc/plugins/emqx_retainer.conf  </span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local-link5g-dmp/emqx_auth_username.conf:/opt/emqx/etc/plugins/emqx_auth_username.conf </span><br><span class="line">-v E:/codebase/Link5g/Iot-hub/local-link5g-dmp/emqx.conf:/opt/emqx/etc/emqx.conf  </span><br><span class="line">-p 31883:11883</span><br><span class="line">-p 38084:18083</span><br><span class="line">-p 3883:1883 </span><br><span class="line">-p 38081:8081</span><br><span class="line">-p 38083:8083 </span><br><span class="line">-p 38085:8084</span><br><span class="line">-p 38883:8883 </span><br><span class="line">--name emqx-local-link5g-dmp </span><br><span class="line">emqx/emqx:4.2.0</span><br></pre></td></tr></table></figure><h3 id="2-4-安装Mysql"><a href="#2-4-安装Mysql" class="headerlink" title="2.4 安装Mysql"></a>2.4 安装Mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">!#/bin/bash</span><br><span class="line">sudo docker run \</span><br><span class="line">--name mysql \</span><br><span class="line">-d --restart always \</span><br><span class="line">-p 33060:3306 \</span><br><span class="line">-v /data/mysql/logs:/var/log \</span><br><span class="line">-v /data/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=xyJB5z^4%kZKVK \</span><br><span class="line">mysql:5.7.35</span><br><span class="line"></span><br><span class="line">docker run --name mysql3307 -d --restart always -p 33060:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7.35</span><br></pre></td></tr></table></figure><h3 id="2-5-安装ES"><a href="#2-5-安装ES" class="headerlink" title="2.5 安装ES"></a>2.5 安装ES</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker network create itmentu-net</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">    --memory=2g</span><br><span class="line">    -e &quot;discovery.type=single-node&quot; \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network itmentu-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>docker 部署ES时一定要限制内存</p></blockquote><h3 id="2-6-安装Postgres"><a href="#2-6-安装Postgres" class="headerlink" title="2.6 安装Postgres"></a>2.6 安装Postgres</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres</span><br></pre></td></tr></table></figure><h3 id="2-7-安装Hoppscotch"><a href="#2-7-安装Hoppscotch" class="headerlink" title="2.7 安装Hoppscotch"></a>2.7 安装Hoppscotch</h3><ul><li>.env</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------------------Backend Config------------------------------#</span></span><br><span class="line"><span class="comment"># Prisma Config</span></span><br><span class="line">DATABASE_URL=postgresql://postgres:admin@10.92.137.168:5432/hoppscotch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Auth Tokens Config</span></span><br><span class="line">JWT_SECRET=sec*dfa12co1de1<span class="comment">#</span></span><br><span class="line">TOKEN_SALT_COMPLEXITY=10</span><br><span class="line">MAGIC_LINK_TOKEN_VALIDITY=3</span><br><span class="line">REFRESH_TOKEN_VALIDITY=604800000</span><br><span class="line">ACCESS_TOKEN_VALIDITY=86400000</span><br><span class="line">SESSION_SECRET=anotasdfa<span class="comment">#ecretas&amp;dfd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hoppscotch App Domain Config</span></span><br><span class="line">REDIRECT_URL=http://localhost:3000</span><br><span class="line">WHITELISTED_ORIGINS=http://localhost:3170,http://localhost:3000,http://localhost:3100</span><br><span class="line">VITE_ALLOWED_AUTH_PROVIDERS=GOOGLE,GITHUB,MICROSOFT,EMAIL</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Auth Config</span></span><br><span class="line">GOOGLE_CLIENT_ID=*****</span><br><span class="line">GOOGLE_CLIENT_SECRET=*****</span><br><span class="line">GOOGLE_CALLBACK_URL=http://localhost:3170/v1/auth/google/callback</span><br><span class="line">GOOGLE_SCOPE=email,profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Github Auth Config</span></span><br><span class="line">GITHUB_CLIENT_ID=*****</span><br><span class="line">GITHUB_CLIENT_SECRET=****</span><br><span class="line">GITHUB_CALLBACK_URL=http://localhost:3170/v1/auth/github/callback</span><br><span class="line">GITHUB_SCOPE=user:email</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Auth Config</span></span><br><span class="line">MICROSOFT_CLIENT_ID=*****</span><br><span class="line">MICROSOFT_CLIENT_SECRET=*****</span><br><span class="line">MICROSOFT_CALLBACK_URL=http://localhost:3170/v1/auth/microsoft/callback</span><br><span class="line">MICROSOFT_SCOPE=user.read</span><br><span class="line">MICROSOFT_TENANT=common</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mailer config</span></span><br><span class="line">MAILER_SMTP_URL=smtps://user@domain.com:pass@smtp.domain.com</span><br><span class="line">MAILER_ADDRESS_FROM=from@example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rate Limit Config</span></span><br><span class="line">RATE_LIMIT_TTL=60</span><br><span class="line">RATE_LIMIT_MAX=100</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------Frontend Config------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Base URLs</span></span><br><span class="line">VITE_BASE_URL=http://localhost:3000</span><br><span class="line">VITE_SHORTCODE_BASE_URL=http://localhost:3000</span><br><span class="line">VITE_ADMIN_URL=http://localhost:3100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Backend URLs</span></span><br><span class="line">VITE_BACKEND_GQL_URL=http://localhost:3170/graphql</span><br><span class="line">VITE_BACKEND_WS_URL=wss://localhost:3170/graphql</span><br><span class="line">VITE_BACKEND_API_URL=http://localhost:3170/v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Terms Of Service And Privacy Policy Links (Optional)</span></span><br><span class="line">VITE_APP_TOS_LINK=https://docs.hoppscotch.io/support/terms</span><br><span class="line">VITE_APP_PRIVACY_POLICY_LINK=https://docs.hoppscotch.io/support/privacy</span><br><span class="line"></span><br><span class="line">ENABLE_SUBPATH_BASED_ACCESS=<span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>初始化数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint sh --env-file .env hoppscotch/hoppscotch </span><br><span class="line"></span><br><span class="line">pnpx prisma migrate deploy</span><br></pre></td></tr></table></figure><ul><li>移除初始化生成的contailer、安装应用容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name hoppscotch -p 3000:3000 -p 3100:3100 -p 3170:3170 --env-file .env --restart unless-stopped hoppscotch/hoppscotch</span><br></pre></td></tr></table></figure><ul><li>安装代理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name hoppscotch-proxy -p 9159:9159  hoppscotch/proxyscotch</span><br></pre></td></tr></table></figure><ul><li>初始化数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint sh --env-file hoppscotch.env hoppscotch/hoppscotch</span><br><span class="line"></span><br><span class="line">pnpx prisma migrate deploy</span><br></pre></td></tr></table></figure><ul><li>docker-compose 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><br><br><br>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Docker的基本使用和管理&quot;&gt;&lt;a href=&quot;#一、Docker的基本使用和管理&quot; class=&quot;headerlink&quot; title=&quot;一、Docker的基本使用和管理&quot;&gt;&lt;/a&gt;一、Docker的基本使用和管理&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装docker&quot;&gt;&lt;a href=&quot;#1-1-安装docker&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装docker&quot;&gt;&lt;/a&gt;1.1 安装docker&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载安装包&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://download.docker.com/linux/static/stable/x86_64/docker-18.06.1-ce.tgz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Tools" scheme="https://wyatt.ink/categories/Tools/"/>
    
    
    <category term="Cloud" scheme="https://wyatt.ink/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>数组复制</title>
    <link href="https://wyatt.ink/posts/Code/f135954a.html"/>
    <id>https://wyatt.ink/posts/Code/f135954a.html</id>
    <published>2020-12-05T14:37:10.000Z</published>
    <updated>2024-06-06T07:50:05.613Z</updated>
    
    <content type="html"><![CDATA[<!-- ![数组复制](https://i.loli.net/2020/12/05/h3a7d4mZgMJquIU.png) --><div align = "center">    <img src="https://wyatt-ink-pic.oss-cn-beijing.aliyuncs.com/img/202406061548523.png" alt="数组复制" width="66%"/></div><p>在谈数组复制之前，先回忆一下浅拷贝和深拷贝：    </p><ul><li>浅拷贝是指<strong>将引用复制给一个变量，即只是增加一个指针指向目标内存地址</strong>     </li><li>深拷贝是指<strong>用新开辟的内存空间拷贝目标对象后，让变量指向这个新的内存地址</strong></li></ul><span id="more"></span><p>所以，浅拷贝后，<strong>如果新旧任一变量对应的对象发生变动时，另一变量也将变动</strong>，而深拷贝不会，因为指向的是不同的对象。   </p><p>首先无论是对于基本类型数组还是对象类型数组，<strong>一般是不能够使用<code>=</code>直接复制的</strong>，因为这样只是将引用复制给变量，<strong>指向的还是同一个数组。</strong></p><p>Java中对于基本类型的数组复制时，复制时因为没有对象的概念，所以不必考虑深拷贝还是浅拷贝，<strong>复制后都是两个变量指向不同的数组对象。</strong> 当然是实际上<strong>都是深拷贝</strong>。</p><p>而对于对象类型的数组时，则<strong>都是浅拷贝</strong>，因为设计时，深拷贝的使用场景相对较少而且性能很差，如果的确需要深拷贝时，单独实现即可。</p><blockquote><p>特别的，对于String类，由于其不可变性，String类型的数组的拷贝可以理解为都是<strong>深拷贝</strong>。</p></blockquote><p>Java数组的复制有如下四种方式：</p><h3 id="1-Object-clone"><a href="#1-Object-clone" class="headerlink" title="1. Object.clone()"></a>1. Object.clone()</h3><p>此方法是数组对象从Object类继承过来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1.clone();</span><br></pre></td></tr></table></figure><h3 id="2-System-arraycopy"><a href="#2-System-arraycopy" class="headerlink" title="2. System.arraycopy()"></a>2. System.arraycopy()</h3><p>此方法内部调用的是一个native方法<br><code>public static native void arraycopy(Object src, int  srcPos,Object dest, int destPos, int length);</code><br>内部参数分别为 源数组、 拷贝开始位置、 目标数组、 粘贴开始位置、 拷贝个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.arraycopy(arr3, <span class="number">0</span>, arr4, <span class="number">0</span>, arr3.length);</span><br></pre></td></tr></table></figure><h3 id="3-Arrays-copyOf"><a href="#3-Arrays-copyOf" class="headerlink" title="3. Arrays.copyOf()"></a>3. Arrays.copyOf()</h3><p>此方法内部也是调用了<code>System.arraycopy()</code>方法<br><code>public static int[] copyOf(int[] original, int newLength) &#123;&#125;</code>, 第一个参数为源数组，第二个参数为拷贝长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr6 = Arrays.copyOf(arr5, arr5.length);</span><br></pre></td></tr></table></figure><h3 id="4-Arrays-copyOfRange"><a href="#4-Arrays-copyOfRange" class="headerlink" title="4. Arrays.copyOfRange()"></a>4. Arrays.copyOfRange()</h3><p>内部同样也是调用了<code>System.arraycopy()</code>方法<br><code>public static int[] copyOfRange(int[] original, int from, int to)&#123;&#125;</code>,第一个参数为源数组，第二个参数为拷贝起始位置，第三个参数为拷贝结束位置（不包含）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr7 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr8 = Arrays.copyOfRange(arr7, <span class="number">0</span>, arr7.length); <span class="comment">//左闭右开</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!-- ![数组复制](https://i.loli.net/2020/12/05/h3a7d4mZgMJquIU.png) --&gt;

&lt;div align = &quot;center&quot;&gt;
    &lt;img src=&quot;https://wyatt-ink-pic.oss-cn-beijing.aliyuncs.com/img/202406061548523.png&quot; alt=&quot;数组复制&quot; width=&quot;66%&quot;/&gt;
&lt;/div&gt;



&lt;p&gt;在谈数组复制之前，先回忆一下浅拷贝和深拷贝：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浅拷贝是指&lt;strong&gt;将引用复制给一个变量，即只是增加一个指针指向目标内存地址&lt;/strong&gt;     &lt;/li&gt;
&lt;li&gt;深拷贝是指&lt;strong&gt;用新开辟的内存空间拷贝目标对象后，让变量指向这个新的内存地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="JavaSEq" scheme="https://wyatt.ink/tags/JavaSEq/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://wyatt.ink/posts/Tools/341ecd43.html"/>
    <id>https://wyatt.ink/posts/Tools/341ecd43.html</id>
    <published>2020-11-29T15:54:34.000Z</published>
    <updated>2024-06-06T07:47:13.763Z</updated>
    
    <content type="html"><![CDATA[<!-- git:    --- : 未修改（提交过的）    +++ : 修改过的  （未提交过的）--><div align = "center">    <img src="https://wyatt-ink-pic.oss-cn-beijing.aliyuncs.com/img/202406061545613.png" alt="Git组成" width="66%"/></div><p>Git是一个免费、开源的开源分布式版本控制系统，它可以高效快速地处理大小项目。它易于学习、占用空间极小性能而又极为出色，超越了像Subversion、CVS、Perforce和ClearCase这样的SCM(soft configuration management)工具，具有像便宜的本地分支、方便的存储区域和多个工作流这样的特性。</p><span id="more"></span><h2 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h2><p>Git是一个<strong>分布式系统</strong>，即不同于集中式系统将所有的版本存放在中央服务器里，而是每一个设备上都是一个完整的版本库，这样做的好处不但使你不必依赖于互联网与中央服务器进行版本控制，而且即使一个设备损坏，只要在其他设备中存在你的项目，也不会造成你的数据丢失事故。</p><blockquote><p>当然在实际使用过程中，会选择一台设备作为“中央服务器”（例如github服务器），但这样只是为了有利于你的数据存储、携带以及团队之间的合作开发，并不是真正的中央服务器。</p></blockquote><h3 id="1-1-Git的构成"><a href="#1-1-Git的构成" class="headerlink" title="1.1 Git的构成"></a>1.1 Git的构成</h3><div align = "center">    <img src="https://wyatt-ink-pic.oss-cn-beijing.aliyuncs.com/img/202406061546602.png" alt="Git结构" width="80%"/></div><blockquote><p>workspace:工作区<br>index&#x2F;stage:暂存区<br>repository:本地仓库<br>remote:远程仓库   </p></blockquote><ol><li>add:将文件从工作区添加到暂存区；</li><li>commit:将文件从暂存区提交到本地仓库；</li><li>push:将文件本地仓库同步到远程仓库；</li><li>pull: <code>git fetch</code> 和 <code>git merge</code> 的简写，从远程仓库获取代码并合并本地的版本；</li><li>fetch&#x2F;clone:<code>clone</code>将项目克隆到本地，<code>fetch</code>更新远程仓库文件到本地仓库；</li><li>checkout:从版本库中恢复文件到工作区</li></ol><p>index和repository共同组成版本库（本地）</p><h3 id="1-2-简单使用"><a href="#1-2-简单使用" class="headerlink" title="1.2 简单使用"></a>1.2 简单使用</h3><ul><li>在当前目录下新建git仓库<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li>添加文件到暂存区中<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add fileName</span><br></pre></td></tr></table></figure></li><li>提交文件到本地仓库中<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;commit information&quot;</span><br></pre></td></tr></table></figure></li><li>推送本地仓库内容至远程仓库<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-开发中推荐使用流程"><a href="#1-3-开发中推荐使用流程" class="headerlink" title="1.3 开发中推荐使用流程"></a>1.3 开发中推荐使用流程</h3><ul><li><p>贮存本地修改：</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></li><li><p>获取远程仓库代码到本地（不合并）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure></li><li><p>合并远程dev分支到本地分支：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase origin/dev</span><br></pre></td></tr></table></figure></li><li><p>恢复本地修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><blockquote><p>若发生冲突，解决后，然后 git add .</p></blockquote></li><li><p>提交代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “update file” </span><br></pre></td></tr></table></figure></li><li><p>推送代码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:dev</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、版本控制"><a href="#二、版本控制" class="headerlink" title="二、版本控制"></a>二、版本控制</h2><p>利用Git我们可以对项目的文件进行存储、对文件的修改进行控制，是软件开发过程中必备的开发工具。   </p><h3 id="2-1-差异比较"><a href="#2-1-差异比较" class="headerlink" title="2.1 差异比较"></a>2.1 差异比较</h3><p><strong>Git管理的是修改，而并非文件本身</strong>，我们可以利用<code>git status</code>我们可以比较workspace和index文件的差异，但是如何比较具体文件的差异时，我们需要用到<code>git diff</code> 命令</p><ul><li><p><code>git status</code>：比较workspace和index中的差异</p></li><li><p><code>git diff (filename)</code>：比较workspace和index中文件的差异</p></li><li><p><code>git diff --cached (filename)</code>、<code>git diff --staged (filename)</code>：比较index和上一次提交的差异</p></li><li><p><code>git diff HEAD (filename)</code>：比较workspace和repository的差别</p><blockquote><p>HEAD指向repository中最新的提交的版本</p></blockquote></li><li><p><code>git diff --stat</code>：统计各个文件的具体变化情况worksapce和index</p></li><li><p><code>git diff --numstat</code>：统计各个文件中变化的行数</p></li></ul><p>git diff输出格式分析</p><p>例如这里有一个文件gitDiffDemo.txt,有内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DragonBall1</span><br><span class="line">DragonBall2</span><br><span class="line">DragonBall3</span><br><span class="line">DragonBall4</span><br><span class="line">DragonBall5</span><br><span class="line">DragonBall6</span><br><span class="line">DragonBall7</span><br><span class="line">DragonBall8</span><br><span class="line">DragonBall9</span><br></pre></td></tr></table></figure><p>将此文件提交至暂存区<code>$ git add gitDiffDemo.txt</code>后，将内容修改如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DragonBall1</span><br><span class="line">DragonBall2</span><br><span class="line">DragonBall3</span><br><span class="line">DragonBall4</span><br><span class="line">DragonBall5s </span><br><span class="line">DragonBall6</span><br><span class="line">DragonBall7</span><br><span class="line">DragonBall8</span><br><span class="line">DragonBall9 </span><br></pre></td></tr></table></figure><p>此时使用<code>$ git diff gitDiffDemo.txt</code>查看异同：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git diff gitDiffDemo.txt </span><br><span class="line">diff --git a/gitDiffDemo.txt b/gitDiffDemo.txt</span><br><span class="line">index 9da8892..fa04dee 100644</span><br><span class="line">--- a/gitDiffDemo.txt</span><br><span class="line">+++ b/gitDiffDemo.txt</span><br><span class="line">@@ -2,7 +2,7 @@ DragonBall1</span><br><span class="line"> DragonBall2</span><br><span class="line"> DragonBall3</span><br><span class="line"> DragonBall4</span><br><span class="line">-DragonBall5 </span><br><span class="line">+DragonBall5s </span><br><span class="line"> DragonBall6</span><br><span class="line"> DragonBall7</span><br><span class="line"> DragonBall8</span><br></pre></td></tr></table></figure><p>让我们来逐行来看输出内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index 9da8892..fa04dee 100644</span><br></pre></td></tr></table></figure><p>9da8892..fa04dee表示暂存区具体文件（此处指当前文件夹下的gitDiffDemo.txt）的哈希值，100644表示对象模式，100表示普通文件(regular file)，644表示文件操作权限，即<code>rw-r--r--</code></p><blockquote><p>101: symbolic link 110: git link </p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- a/gitDiffDemo.txt</span><br><span class="line">+++ b/gitDiffDemo.txt</span><br></pre></td></tr></table></figure><p>--- 表示变化前的版本（提交过的）<br>+++ 表示变化后的版本（修改过的）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@@ -2,7 +2,7 @@ DragonBall1</span><br></pre></td></tr></table></figure><p>一对<code>@@</code>表示一个差异小结，一个差异小结的范围为<strong>变更位置上下3行</strong>，即一般为7行，上下行内容不足或两个差异点距离过近这个范围可能会缩小或变大。<br><code>-2,7</code>: 表示变化前的文件中，差异小结范围为第2行开始连续7行<br><code>+2,7</code>: 表示变化后的文件中，差异小结范围为第2行开始连续7行        </p><p>“DragonBall1”内容为差异小结范围上一行，不用理会。 </p><h3 id="2-2-快照Id"><a href="#2-2-快照Id" class="headerlink" title="2.2 快照Id"></a>2.2 快照Id</h3><p>在Git中，针对每一次commit都会生成相应的快照，即在Git系统中我们可以选择恢复某一个时间点上的版本快照以此达到版本控制的目的，使用<code>git log</code>命令查看commit历史</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">commit 7361c5145897d215c7bd9e9cf5a13c59f5908e7d</span><br><span class="line">Author: WyattWang &lt;cc7722@foxmail.com&gt;</span><br><span class="line">Date:   Sun Nov 29 20:14:41 2020 +0800</span><br><span class="line"></span><br><span class="line">    git tracks changes</span><br><span class="line"></span><br><span class="line">commit 4dbe0ff1cd9ade95b0ca83e22ac6dc27619b1cd9</span><br><span class="line">Author: WyattWang &lt;cc7722@foxmail.com&gt;</span><br><span class="line">Date:   Sun Nov 29 16:38:14 2020 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit 1076977642fedc84ef89be1a840850b991e434c7</span><br><span class="line">Author: WyattWang &lt;cc7722@foxmail.com&gt;</span><br><span class="line">Date:   Sun Nov 29 16:17:24 2020 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit a2fdd707b60ff78bada28410dc0ca8b6dd027e43</span><br><span class="line">Author: WyattWang &lt;cc7722@foxmail.com&gt;</span><br><span class="line">Date:   Sun Nov 29 14:11:51 2020 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上所示，每一小段commit信息从上往下包含了commit id、提交者信息、commit时间和commit信息。<br>如果只是想查看commit id和commit信息，加上<code>--pretty=oneline</code>参数即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git log <span class="attr">--pretty</span>=<span class="literal">on</span>eline</span><br><span class="line">7361c5145897d215c7bd9e9cf5a13c59f5908e7d git tracks changes</span><br><span class="line">4dbe0ff1cd9ade95b0ca83e22ac6dc27619b1cd9 append GPL</span><br><span class="line">1076977642fedc84ef89be1a840850b991e434c7 add distributed</span><br><span class="line">a2fdd707b60ff78bada28410dc0ca8b6dd027e43 wrote a readme file</span><br></pre></td></tr></table></figure><h3 id="2-3-版本回退"><a href="#2-3-版本回退" class="headerlink" title="2.3 版本回退"></a>2.3 版本回退</h3><p>在Git中，<code>HEAD</code>表示当前版本，上一个版本为<code>HEAD^</code>或<code>HEAD~1</code>，上上一个版本为<code>HEAD^^</code>或<code>HEAD~2</code>，上上个版本为<code>HEAD^^^</code>或<code>HEAD~3</code>……</p><p>使用<code>git reset</code>命令可以让版本进行回退, 例如回退到上一版本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --mixed HEAD^ </span><br><span class="line">$ git reset --mixed HEAD~1 </span><br></pre></td></tr></table></figure><p>回退到指定commit id的版本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --mixed 4dbe0ff1cd9ade95b0ca83e22ac6dc27619b1cd9</span><br></pre></td></tr></table></figure><p>如果从版本B回退到之前的版本A，在A之后的提交信息将会在git log中<strong>查询不到</strong>commit id,但是如果在当前命令行窗口还可以看到版本B的commit id，或者使用<code>git reflog</code>可以看到版本变动的过程及其id</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">cde5cd3 HEAD@&#123;0&#125;: reset: moving to cde5cd3cf18629fbc9d9f033447478b90355224c</span><br><span class="line">4dbe0ff HEAD@&#123;1&#125;: reset: moving to HEAD^^</span><br><span class="line">d5c7d80 HEAD@&#123;2&#125;: reset: moving to HEAD~1</span><br><span class="line">cde5cd3 HEAD@&#123;3&#125;: commit: 提交2</span><br><span class="line">d5c7d80 HEAD@&#123;4&#125;: commit: 提交</span><br><span class="line">7361c51 HEAD@&#123;5&#125;: commit: git tracks changes</span><br><span class="line">4dbe0ff HEAD@&#123;6&#125;: reset: moving to 4dbe0ff</span><br><span class="line">a2fdd70 HEAD@&#123;7&#125;: reset: moving to a2fdd70</span><br><span class="line">4dbe0ff HEAD@&#123;8&#125;: reset: moving to 4dbe0ff1cd9ade95b0ca83e22ac6dc27619b1cd9</span><br><span class="line">1076977 HEAD@&#123;9&#125;: reset: moving to HEAD^</span><br><span class="line">4dbe0ff HEAD@&#123;10&#125;: commit: append GPL</span><br><span class="line">1076977 HEAD@&#123;11&#125;: commit: add distributed</span><br><span class="line">a2fdd70 HEAD@&#123;12&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>版本回退的三种模式：</p><ul><li>mixed: <strong>默认模式</strong>，恢复指定版本，保留工作区，清空缓存区，若再次commit则需要重新add</li><li>soft: 恢复指定版本，保留工作区和缓存区，可直接再次commit</li><li>hard: 恢复到指定版本，<strong>删除工作区和缓存区</strong></li></ul><p>在Git中除了使用<code>git reset</code>命令以外，还可以使用<code>git revert</code>命令来达到类似的的效果，但这两者还是有所区别：         </p><ul><li><p><code>git reset</code>是将版本<strong>回退</strong>到之前的版本，但那个版本之后的版本将不会被保留</p></li><li><p><code>git revert</code>是将指定版本<strong>反做</strong>，例如按照时间线的版本为a-&gt;b-&gt;c, 当HEAD为版本c时反做版本b，即在提交版本b时，添加了file1.txt，则反做就是执行相反操作，删除file1.txt</p><blockquote><p>如果<strong>在一个文件中</strong>多次修改内容并且进行提交，反做<strong>非最后一次提交</strong>时，会提示发生冲突，需要手动解决</p></blockquote></li></ul><p>➦<a href="https://blog.csdn.net/yxlshk/article/details/79944535">Git恢复之前版本的两种方法reset、revert（图文详解）</a></p><h3 id="2-4-撤销修改"><a href="#2-4-撤销修改" class="headerlink" title="2.4 撤销修改"></a>2.4 撤销修改</h3><p>如果需要<strong>撤销在workspace中的修改</strong>，可以使用<code>git checkout -- filename</code>命令(注意文件名前的空格)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.md </span><br></pre></td></tr></table></figure><ul><li>如果readme.md自修改后第一次放进index中，则git checkout后版本和repository中的版本是一致的</li><li>如果readme.md之前放进过index中，则git checkout后版本和前一次添加到index中的版本保持一致</li></ul><p>即<code>git checkout</code>后的版本和最新的<code>git add</code>或<code>git commit</code>的文件保持一致<br><br></p><p>如果需要<strong>撤销workspace添加到index中的修改</strong>，则可已使用<code>git reset HEAD filename</code>命令</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.md</span><br></pre></td></tr></table></figure><p><code>git reset</code> <strong>不仅可以回退版本，还可以回退index中的修改</strong>，即将repository中最新的版本<code>HEAD</code>替换掉index中修改过的文件。</p><h3 id="2-5-删除文件"><a href="#2-5-删除文件" class="headerlink" title="2.5 删除文件"></a>2.5 删除文件</h3><p>如果工作区中的文件和版本库中的<strong>版本一致</strong>，使用<code>git rm &lt;filename&gt;</code>命令删除工作区文件，并且将这次删除放入暂存区</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rm readme.md</span><br><span class="line">$ git commit -m &quot;rm readme.md&quot;</span><br></pre></td></tr></table></figure><p>如果在workspace中修改过文件，无论有没有添加到index中，即<strong>工作区和版本库中文件版本不一致</strong>，单纯使用<code>git rm</code>命令会出现错误，此时需要加上参数<code>-f</code>，即使用<code>git rm -f &lt;filename&gt;</code>进行删除</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -f readme.md</span><br></pre></td></tr></table></figure><p>如果只是想删除版本库中的文件，<strong>但保留工作区文件</strong>，则使用<code>git rm --cached &lt;filename&gt;</code>可以删除暂存区文件，并将这次删除的操作添加到暂存区中，即此时该文件处于<em>untracked</em>状态</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached readme.md</span><br><span class="line">$ git commit -m &quot;untrack reame.md&quot;</span><br></pre></td></tr></table></figure><h3 id="2-6-修改历史commit中的Author和Email"><a href="#2-6-修改历史commit中的Author和Email" class="headerlink" title="2.6 修改历史commit中的Author和Email"></a>2.6 修改历史commit中的Author和Email</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git filter-branch -f --env-filter <span class="string">&quot;</span></span></span><br><span class="line">GIT_AUTHOR_NAME=&#x27;newName&#x27;;     </span><br><span class="line">GIT_AUTHOR_EMAIL=&#x27;newEmail@example.com&#x27;;         </span><br><span class="line">GIT_COMMITTER_NAME=&#x27;oldName&#x27;;           </span><br><span class="line">GIT_COMMITTER_EMAIL=&#x27;oldEmail@example.com&#x27;;</span><br><span class="line">&quot; HEAD</span><br></pre></td></tr></table></figure><h2 id="三、远程仓库"><a href="#三、远程仓库" class="headerlink" title="三、远程仓库"></a>三、远程仓库</h2><p>虽然Git是一个<strong>分布式</strong>的版本控制工具，并不存在着中央服务器，但是在实际使用中还是存在一个远程仓库，方便用于同步代码或协同开发的。    </p><h3 id="3-1-添加远程仓库"><a href="#3-1-添加远程仓库" class="headerlink" title="3.1 添加远程仓库"></a>3.1 添加远程仓库</h3><p>使用<code>git remote add &lt;仓库名称&gt; &lt;仓库地址&gt;</code>命令可以建立本地仓库和远程仓库的连接</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:server-name/learn-git.git</span><br></pre></td></tr></table></figure><p>添加完成后可以使用<code>git remote -v</code>查看已关联的远程仓库信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit@gitee.com:server-name/learn-git.git (fetch)</span><br><span class="line">origingit@gitee.com:server-name/learn-git.git (push)</span><br></pre></td></tr></table></figure><p>以及可以使用<code>git remote rename &lt;old name&gt; &lt;new name&gt;</code>来更新远程仓库名称和使用<code>git remote remove &lt;name&gt;</code>来移除远程仓库名称</p><h3 id="3-2-推送文件"><a href="#3-2-推送文件" class="headerlink" title="3.2 推送文件"></a>3.2 推送文件</h3><p>使用<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>命令可以推送本地仓库文件至远程仓库，特别的使用加上参数<code>-u</code>，可以给推送的分支加上（跟踪）引用，即使当前分子和多个远程主机存在关联，后面也可以不加任何参数使用git push推送到和本次相同的远程仓库中。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master <span class="comment">#第一次</span></span><br><span class="line">$ git push                  <span class="comment">#后续可简写</span></span><br></pre></td></tr></table></figure><blockquote><p>如果远程仓库地址为ssh url，则需要提前配置当前主机和远程主机的ssh公私钥</p></blockquote><p>特别的，使用<code>git push -f origin master</code>命令将本地文件推送到远程，并<strong>强制覆盖</strong>，使用时需要特别小心，<strong>谨慎使用</strong>。</p><h3 id="3-3-代码克隆"><a href="#3-3-代码克隆" class="headerlink" title="3.3 代码克隆"></a>3.3 代码克隆</h3><p>使用<code>git clone &lt;远程仓库地址&gt;</code>命令可以将远程仓库的文件克隆到本地</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@gitee.com:server-name/learn-git.git</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>➱ <a href="https://www.cnblogs.com/ims-/p/9747333.html">https://www.cnblogs.com/ims-/p/9747333.html</a><br>➱ <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>➱ <a href="https://blog.csdn.net/qq_42780289/article/details/98353792">https://blog.csdn.net/qq_42780289/article/details/98353792</a></p>]]></content>
    
    
    <summary type="html">&lt;!-- git:
    --- : 未修改（提交过的）
    +++ : 修改过的  （未提交过的）
--&gt;

&lt;div align = &quot;center&quot;&gt;
    &lt;img src=&quot;https://wyatt-ink-pic.oss-cn-beijing.aliyuncs.com/img/202406061545613.png&quot; alt=&quot;Git组成&quot; width=&quot;66%&quot;/&gt;
&lt;/div&gt;


&lt;p&gt;Git是一个免费、开源的开源分布式版本控制系统，它可以高效快速地处理大小项目。它易于学习、占用空间极小性能而又极为出色，超越了像Subversion、CVS、Perforce和ClearCase这样的SCM(soft configuration management)工具，具有像便宜的本地分支、方便的存储区域和多个工作流这样的特性。&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="https://wyatt.ink/categories/Tools/"/>
    
    
    <category term="Tools" scheme="https://wyatt.ink/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://wyatt.ink/posts/Code/82734d8.html"/>
    <id>https://wyatt.ink/posts/Code/82734d8.html</id>
    <published>2020-11-24T15:04:33.000Z</published>
    <updated>2022-05-23T01:20:25.653Z</updated>
    
    <content type="html"><![CDATA[<p>基础Linux命令</p><span id="more"></span><h2 id="1-使用命令"><a href="#1-使用命令" class="headerlink" title="1.使用命令"></a>1.使用命令</h2><ol><li><p>详细信息 <code>ls -l</code></p></li><li><p>删除 rm(remove)</p><ul><li>删除文件 <code>rm test.txt</code></li><li>删除文件夹  <code>rm -r dictory</code></li></ul></li><li><p>移动 mv(move)</p><ul><li>改名 <code>mv file1.txt file2.txt</code></li><li>移动 <code>mv workspace/space2/helloworld.txt workspace/space1/helloworld.txt</code></li></ul></li><li><p>复制 cp(copy)</p><ul><li>cp <code>workspace/space2/helloworld.txt workspace/space1/helloworld.txt</code></li></ul></li><li><p>显示文件信息</p><ul><li>显示全部 <code>cat file.txt</code></li><li>查看开头部分<code>head file.txt -n 4</code></li><li>查看结尾部分<code>tail file.txt -n 4</code></li><li>循环读取(每隔10s)动态改变的日志文件<code>tail -f -s 10 file.log</code>,</li><li>暂时少量查看<code>less file.txt </code></li></ul></li><li><p>文件权限</p></li></ol><table><thead><tr><th>u(author)</th><th>g(group)</th><th>o(other)</th></tr></thead><tbody><tr><td>rw-(可读可写)</td><td>r-x(可读可运行)</td><td>r--(可读)</td></tr></tbody></table><!-- gaodafeng shegnxia shegnxiashegnxi youshoushizhi --><blockquote><p>r : 可读<br>w : 修改、删除<br>x : execute可执行</p></blockquote><ul><li><p>author限制可读 <code>chmod u-r file.txt</code></p></li><li><p>author增加可读 <code>chmod u+r file.txt</code></p></li><li><p>group、other限制读<code>chmod go-r file.txt</code></p></li><li><p>为所有用户增加可读 <code>chmod a-r file.txt</code></p></li><li><p>为所有用户添加所有权限 <code>chmod 777 file.txt</code></p><blockquote><p><code>rwx rwx rwx</code>二进制 <code>111 111 111</code>, 可利用二进制添加相应的权限</p></blockquote></li></ul><ol start="6"><li>设置目录权限</li></ol><ul><li>为user添加&#x2F;user&#x2F;local&#x2F;的权限 chown -R user &#x2F;usr&#x2F;local&#x2F;</li></ul><ol start="7"><li>检索grep</li></ol><ul><li><code>grep keyWord file.txt</code></li><li>配合正则表达式<ul><li><code>grep ^KeyWord file.txt</code></li></ul></li></ul><ol start="8"><li><p>统计wc</p><ul><li>统计行数、单词数、字符数<code>wc file.txt</code></li><li>统计byte数<code>wc -c file.txt</code></li><li>统计字符数<code>wc -m file.txt</code></li><li>统计最新的一行的长度<code>wc -l file.txt</code></li><li>统计最长的一行的长度<code>wc -L file.txt</code></li><li>统计单词个数 <code>wc -w file.txt</code></li></ul></li><li><p><a href="https://www.linuxprobe.com/linux-cat-system.html">查看系统信息</a></p><ul><li><p>lsb_release -a </p><blockquote><p>Linux Standard Base</p></blockquote></li><li><p>cat &#x2F;etc&#x2F;os-release</p></li></ul></li><li><p>[查看是否安装某个软件]</p><ul><li><p>Ubuntu <code>dpkg -s &quot;软件或包的名字&quot;</code></p></li><li><p>CentOS <code>rpm -qa | grep &quot;软件或者包的名字&quot;</code></p><blockquote><p><code>rpm: redhat package manager; -q: query; a: all</code></p></blockquote></li></ul></li><li><p>查看网络活动相关信息</p><ul><li><p><code>netstat -nptl</code> </p><blockquote><p>connetction、tcp、programs、listening</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  [root@cloudr etc]# netstat -h</span><br><span class="line">      -r, --route              display routing table</span><br><span class="line">      -I, --interfaces=&lt;Iface&gt; display interface table for &lt;Iface&gt;</span><br><span class="line">      -i, --interfaces         display interface table</span><br><span class="line">      -s, --statistics         display networking statistics (like SNMP)</span><br><span class="line">   -M, --masquerade         display masqueraded connections</span><br><span class="line">  </span><br><span class="line">      -v, --verbose            be verbose //详细的</span><br><span class="line">      -e, --extend             display other/more information</span><br><span class="line">      -p, --programs           display PID/Program name for sockets//PID、程序名</span><br><span class="line">      -o, --timers             display timers</span><br><span class="line">   -c, --continuous         continuous listing</span><br><span class="line">  </span><br><span class="line">      -l, --listening          display listening server sockets //监听中的套接口</span><br><span class="line">      -a, --all                display all sockets (default: connected)</span><br><span class="line">      -F, --fib                display Forwarding Information Base (default)</span><br><span class="line">      -C, --cache              display routing cache instead of FIB</span><br><span class="line">   -Z, --context            display SELinux security context for sockets</span><br><span class="line"></span><br><span class="line">-t, --tcp//tcp相关</span><br><span class="line">-u, --udp//udp相关</span><br><span class="line">-U, --udplite</span><br><span class="line">-w, --raw //原始</span><br><span class="line">-x, --unix//unix相关</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-用户和工作组管理类命令"><a href="#2-用户和工作组管理类命令" class="headerlink" title="2.用户和工作组管理类命令"></a>2.用户和工作组管理类命令</h2><h3 id="2-1-查看用户"><a href="#2-1-查看用户" class="headerlink" title="2.1 查看用户"></a>2.1 查看用户</h3><ul><li>查看用户信息命令 <code>id</code></li><li>显示用户名称命令 <code>logname</code></li><li>查看用户操作命令 <code>history</code><ul><li>执行第几条命令 <code>!数字</code></li></ul></li><li>查看用户所属用户组 <code>groups</code></li></ul><h3 id="2-2-用户组管理"><a href="#2-2-用户组管理" class="headerlink" title="2.2 用户组管理"></a>2.2 用户组管理</h3><ul><li><p>查看所有用户组命令 <code>cat /etc/group</code></p></li><li><p>创建一个用户组命令 <code>groupadd 用户组名</code> </p></li><li><p>删除一个用户组命令 <code>groupdel 用户名</code></p></li><li><p>更改用户组名命令 <code>groupmod 新用户组名 旧用户组名</code></p></li><li><p>添加用户到用户组 <code>usermod -a -G groupName userName</code></p><blockquote><p>-a : appened，不能直接-G，否则会离开原有用户组</p></blockquote></li></ul><h3 id="2-3-用户管理"><a href="#2-3-用户管理" class="headerlink" title="2.3 用户管理"></a>2.3 用户管理</h3><ul><li>查看当前登录用户名命令 <code>w、who、users、whoami</code></li><li>切换用户 <code>su [选项] 目标用户</code></li><li>新增用户账号 <code>useradd 用户名</code></li><li>删除用户账号 <code>userdel 用户名</code><ul><li>强制删除<code>userdel -f 用户名</code> </li><li>删除用户的同时，删除与用户相关的所有文件 <code>userdel -r 用户名</code></li></ul></li><li>为用户设置口令 <code>passwd 用户名</code></li><li>查看用户所属组命令 <code>groups 用户名</code></li><li>变更用户账号信息命令 <code>usermod [选项] 用户名</code></li></ul><h3 id="2-4-用户权限管理"><a href="#2-4-用户权限管理" class="headerlink" title="2.4 用户权限管理"></a>2.4 用户权限管理</h3><p>普通用户如何获得root权限</p><ul><li><p>用户使用sudo命令并输入口令<br>在文件&#x2F;etc&#x2F;sudoers第100行后添加<code>username  ALL=(ALL)   ALL</code>后保存修改，执行命令时输入当前用户口令，即可执行root权限</p></li><li><p>用户组使用sudo命令并输入口令<br>在文件&#x2F;etc&#x2F;sudoers第100行后添加<code>%groupname  ALL=(ALL)   ALL</code>后保存修改，执行命令时输入当前用户口令，即可执行root权限</p></li><li><p>用户使用sudo命令并（不需要输入口令）<br>在文件&#x2F;etc&#x2F;sudoers第100行后添加<code>username  ALL=(ALL)   NOPASSWD: ALL</code>后保存修改，执行命令时输入当前用户口令，即可执行root权限</p></li><li><p>用户组使用sudo命令并（不需要输入口令）<br>在文件&#x2F;etc&#x2F;sudoers第100行后添加<code>%groupname  ALL=(ALL)   NOPASSWD: ALL</code>后保存修改，执行命令时输入当前用户口令，即可执行root权限</p></li><li><p>显示当前挂载在Linux系统的每个分区 df</p><ul><li><code>df -h</code> 将分区小转换为用户可读的形式</li></ul></li><li><p>查看文件大小</p><ul><li><code>ll -h</code> h: human-readable</li></ul></li><li><p>归档命令<code>tar</code></p><ul><li><p><code>tar -cvf testTar.tar * </code></p><ul><li>c –create: 创建一个新的归档文件</li><li>v –verbose: 显示已处理文件</li><li>f –file&#x3D;ARCHIVE: 指向归档文件的名字</li></ul></li><li><p><code>tar -cvzf testTar.tar.gz *</code></p><ul><li>z –zip: 压缩归档文件</li></ul></li><li><p><code>tar -xvzf testTar.tar.gz -C ~/codebase</code></p><ul><li>x –extract : 提取（解压）</li><li>C : 指定解压目录</li></ul></li><li><p><code>tar czvf - importantstuff/ | ssh useranme@10.0.0.123  &quot;cat &gt; /home/username/myfiles.tar.gz</code> ： 归档importantstuff目录下的文件至10.0.0.123主机的&#x2F;home&#x2F;username&#x2F;myfile.tar.gz文件</p><ul><li>- : 该连接符表示将数据输出到标准标准的输出设备上，这允许将归档文件文件名的详细信息推后至该命令的末尾。</li><li>| : 管道，将这个未命名的、压缩的归档文件传输至远程服务器的ssh登陆</li><li>“cat &gt; &#x2F;home&#x2F;username&#x2F;myfiles.tar.gz” : 键入内容至myfiles.tar.gz(覆盖)</li></ul></li></ul></li><li><p>文件分割 split</p><ul><li><code>split -4 README.md</code>: 将README.md文件每4行分割为以x开头的文件,例如xaa、xab、xac；</li><li><code>split 2KB README.md REAME.md.part</code>: 将README.md分割为以REAMD.md.part开头的文件，例如REAME.md.part.aa、REAME.md.part.ab</li></ul></li><li><p>搜索文件命令locate</p><ul><li><code>locate *.mp4</code><blockquote><p>locate命令并非真正地文件系统本身，而是在一个已存在的索引中进行简单的搜索，但是该索引<strong>并不是实时性的</strong>，默认是在系统每次启动时自动更新，所以会因为索引过时时搜索不到文件，使用<code>updatedb</code>命令更新.<br></p></blockquote><blockquote><p>centos安装命令<code>sudo yum install mlocate</code></p></blockquote></li></ul></li><li><p>指定目录下查找文件find</p><ul><li><code>find readme.md</code> : 在当前目录下查找文件名为readme.md的文件（默认为当前目录下查找）</li><li><code>find /home/cc1/dd/ -iname &quot;*.java&quot; -exec tar -rvf javaZip.tar &#123;&#125; \;</code><ul><li>-exec: shell的内建命令，在当前shell下用exec后面的命令替换掉当前执行的进程，并将老进程的环境清除掉。</li><li>-iname: 忽略名字字母大小写查找</li><li>{}: 告诉find命令，对于每个查找到的文件执行官exec后面的命令</li><li>\;: 格式，必须</li></ul></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>➱ <a href="https://www.cnblogs.com/zox2011/archive/2013/05/28/3103824.html">https://www.cnblogs.com/zox2011/archive/2013/05/28/3103824.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;基础Linux命令&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="Linux" scheme="https://wyatt.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者模型</title>
    <link href="https://wyatt.ink/posts/Code/161dcf21.html"/>
    <id>https://wyatt.ink/posts/Code/161dcf21.html</id>
    <published>2020-11-22T17:03:24.000Z</published>
    <updated>2022-04-21T06:35:15.648Z</updated>
    
    <content type="html"><![CDATA[<p>生产者消费者模型是线程模型中一个经典问题：生产者和消费者在同一时间内共享同一个容器，生产者向容器添加产品，消费者从容器中取走产品，<strong>当容器满时，生产者阻塞，当容器为空时，消费者阻塞</strong>。</p><div align = "center">    <img src="https://i.loli.net/2020/11/22/DzeAYk3SVMHQ4ZG.png" alt="生产者消费者模型示意图" width="60%"/></div><span id="more"></span><h2 id="一、Code"><a href="#一、Code" class="headerlink" title="一、Code"></a>一、Code</h2><h3 id="1-1-synchronized实现"><a href="#1-1-synchronized实现" class="headerlink" title="1.1 synchronized实现"></a>1.1 synchronized实现</h3><h4 id="1-1-1-容器"><a href="#1-1-1-容器" class="headerlink" title="1.1.1 容器"></a>1.1.1 容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; container = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">containerSize</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">//容器的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 生产者生产内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [val] 添加的内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: cloudr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/11/22</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (container.size() &gt; containerSize) &#123;</span><br><span class="line">            wait(); <span class="comment">//阻塞生产者，不让其继续生产</span></span><br><span class="line">        &#125;</span><br><span class="line">        container.add(val);</span><br><span class="line">        notify();   <span class="comment">//通知消费者继续消费</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 消费者消费内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: int 返回生产者所生产的</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: cloudr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2020/11/22</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (container.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            wait(); <span class="comment">//阻塞生消费者，不让其继续消费</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">returnRes</span> <span class="operator">=</span> container.poll();</span><br><span class="line">        notify();   <span class="comment">//通知生产者继续生产</span></span><br><span class="line">        <span class="keyword">return</span> returnRes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-生产者"><a href="#1-1-2-生产者" class="headerlink" title="1.1.2 生产者"></a>1.1.2 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Container container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                container.add(i);   <span class="comment">//生产内容添加进容器中</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-消费者"><a href="#1-1-3-消费者" class="headerlink" title="1.1.3 消费者"></a>1.1.3 消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Container container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                val = container.get();  <span class="comment">//从容器中获取产品消费</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-4-Demo"><a href="#1-1-4-Demo" class="headerlink" title="1.1.4 Demo"></a>1.1.4 Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerAndConsumerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Container</span>();</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(container);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(container);</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-BlockingQueue实现"><a href="#1-2-BlockingQueue实现" class="headerlink" title="1.2 BlockingQueue实现"></a>1.2 BlockingQueue实现</h3><p>使用BlockingQueue时，我们再也不必关心什么时候应该阻塞线程，什么时候应该唤醒线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.step1.ProducerAndConsumerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shangjing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/22 4:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCByBlockingQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">BlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>(<span class="number">10</span>);    <span class="comment">//容器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>));   <span class="comment">//模拟生产者和消费者效率不一致</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>);</span><br><span class="line">                    blockingQueue.put(val);  <span class="comment">//生产内容进入容器</span></span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-生产者生产&quot;</span> + val + <span class="string">&quot;，容器中数量为:&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">500</span>));    <span class="comment">//模拟生产者和消费者效率不一致</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> (<span class="type">int</span>) blockingQueue.take();   <span class="comment">//消费者从容器消费产品</span></span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-消费者消费&quot;</span> + val + <span class="string">&quot;，容器中数量为：&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PCByBlockingQueue</span> <span class="variable">blockingQueueTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PCByBlockingQueue</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(blockingQueueTest.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(blockingQueueTest.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="comment">// 模拟多个生产者和消费者</span></span><br><span class="line"><span class="comment">//        new Thread(blockingQueueTest.new Producer()).start();     </span></span><br><span class="line"><span class="comment">//        new Thread(blockingQueueTest.new Consumer()).start();</span></span><br><span class="line"><span class="comment">//        new Thread(blockingQueueTest.new Producer()).start();</span></span><br><span class="line"><span class="comment">//        new Thread(blockingQueueTest.new Consumer()).start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>➱ <a href="https://www.jianshu.com/p/f53fb95b5820">https://www.jianshu.com/p/f53fb95b5820</a>    </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;生产者消费者模型是线程模型中一个经典问题：生产者和消费者在同一时间内共享同一个容器，生产者向容器添加产品，消费者从容器中取走产品，&lt;strong&gt;当容器满时，生产者阻塞，当容器为空时，消费者阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;div align = &quot;center&quot;&gt;
    &lt;img src=&quot;https://i.loli.net/2020/11/22/DzeAYk3SVMHQ4ZG.png&quot; alt=&quot;生产者消费者模型示意图&quot; width=&quot;60%&quot;/&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="Multi-Thread" scheme="https://wyatt.ink/tags/Multi-Thread/"/>
    
  </entry>
  
  <entry>
    <title>基本类型转换</title>
    <link href="https://wyatt.ink/posts/Code/8a529bb2.html"/>
    <id>https://wyatt.ink/posts/Code/8a529bb2.html</id>
    <published>2020-10-06T13:07:10.000Z</published>
    <updated>2022-04-21T08:19:40.471Z</updated>
    
    <content type="html"><![CDATA[<ul><li>字符串与数值类型互转</li><li>char和String互转</li><li>其他类型互转</li><li>英文字母与ASCII码数值范围</li></ul><br><span id="more"></span><h2 id="一、字符类转化为整型"><a href="#一、字符类转化为整型" class="headerlink" title="一、字符类转化为整型"></a>一、字符类转化为整型</h2><ul><li><p>字符串转double：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;    <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> Double.parseDouble(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转float：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;   <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转int：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;   <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Float.parseFloat(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转short：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;   <span class="type">short</span> <span class="variable">sh</span> <span class="operator">=</span> Short.parseFloat(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转long：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;   <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.parseLong(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转byte：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;124&quot;</span>;   <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> Long.parseByte(s);</span><br></pre></td></tr></table></figure></li><li><p>字符串转char：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>char转字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(c);</span><br></pre></td></tr></table></figure></li><li><p>char</p></li></ul><h2 id="二、数字类型转字符串"><a href="#二、数字类型转字符串" class="headerlink" title="二、数字类型转字符串"></a>二、数字类型转字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(a);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(d);</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the string representation of the &#123;<span class="doctag">@code</span> Object&#125; argument.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>   obj   an &#123;<span class="doctag">@code</span> Object&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  if the argument is &#123;<span class="doctag">@code</span> null&#125;, then a string equal to</span></span><br><span class="line"><span class="comment">    *          &#123;<span class="doctag">@code</span> &quot;null&quot;&#125;; otherwise, the value of</span></span><br><span class="line"><span class="comment">    *          &#123;<span class="doctag">@code</span> obj.toString()&#125; is returned.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>     java.lang.Object#toString()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="literal">null</span>) ? <span class="string">&quot;null&quot;</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、其他类型转换"><a href="#三、其他类型转换" class="headerlink" title="三、其他类型转换"></a>三、其他类型转换</h2><h3 id="3-1-Double转其他类型"><a href="#3-1-Double转其他类型" class="headerlink" title="3.1 Double转其他类型"></a>3.1 Double转其他类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其它类型同下</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">byteValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">byte</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">short</span> <span class="title function_">shortValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">short</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">long</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">float</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//double 转 int</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">127.0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(d).intValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取整</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> Math.ceil(d);</span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> Math.floor(d);</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> Math.round(d);</span><br></pre></td></tr></table></figure><h3 id="3-2-数值类型转二进制"><a href="#3-2-数值类型转二进制" class="headerlink" title="3.2 数值类型转二进制"></a>3.2 数值类型转二进制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toBinaryString(i);</span><br><span class="line"><span class="comment">//long类型</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Long.toBinaryString(l);</span><br><span class="line"><span class="comment">//short类型</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">st</span> <span class="operator">=</span> Short.toBinaryString(s);</span><br></pre></td></tr></table></figure><h3 id="3-3-char类型与数值转换"><a href="#3-3-char类型与数值转换" class="headerlink" title="3.3 char类型与数值转换"></a>3.3 char类型与数值转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a~z 97~122</span></span><br><span class="line"><span class="comment">//A~Z 65~90</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;9&#x27;</span> - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;字符串与数值类型互转&lt;/li&gt;
&lt;li&gt;char和String互转&lt;/li&gt;
&lt;li&gt;其他类型互转&lt;/li&gt;
&lt;li&gt;英文字母与ASCII码数值范围&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="JavaSE" scheme="https://wyatt.ink/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>模板模式</title>
    <link href="https://wyatt.ink/posts/Code/64f4f5cc.html"/>
    <id>https://wyatt.ink/posts/Code/64f4f5cc.html</id>
    <published>2020-08-25T02:27:10.000Z</published>
    <updated>2022-04-21T08:19:37.134Z</updated>
    
    <content type="html"><![CDATA[<p><strong>模板模式</strong></p><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的<strong>某些特定步骤</strong>。</p><p>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</p><p>何时使用：有一些通用的方法。</p><p>如何解决：<strong>将这些通用算法抽象出来。</strong></p><p>关键代码：在抽象类实现，其他步骤在子类实现。</p><p>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><p>优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p><p>缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p><p>注意事项：为防止恶意操作，<strong>一般模板方法都加上 final关键词。</strong><br>实现</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式uml"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">TemplatePatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cooking</span> <span class="variable">cooking</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CookFood</span>();</span><br><span class="line">        cooking.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Cooking</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做饭开始&quot;</span>);</span><br><span class="line">        step1();</span><br><span class="line">        step2();</span><br><span class="line">        System.out.println(<span class="string">&quot;做饭结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CookFood</span> <span class="keyword">extends</span> <span class="title class_">Cooking</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;放入食材&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;放入调料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div style="margin-left: 5px  font-size:16px;">[1]<a href="https://www.runoob.com/design-pattern/adapter-pattern.html">https://www.runoob.com/design-pattern/adapter-pattern.html</a><br>[2]<a href="https://www.bilibili.com/video/BV1kk4y117j5">五分钟学设计模式.13.模板方法模式</a><br></div> ]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;模板模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&amp;#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。&lt;/p&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="DesignMode" scheme="https://wyatt.ink/tags/DesignMode/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://wyatt.ink/posts/Code/907a70d0.html"/>
    <id>https://wyatt.ink/posts/Code/907a70d0.html</id>
    <published>2020-08-17T15:27:10.000Z</published>
    <updated>2022-04-21T08:19:28.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>意图：为其他对象提供一种代理以<strong>控制对这个对象的访问</strong>。</p><blockquote><p>代理模式和装饰器模式很相似，但代理模式更偏向于权限控制，装饰器模式则更偏向于功能扩展</p></blockquote><p>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要<strong>安全控制</strong>，或者需要进程外的访问），<strong>直接访问会给使用者或者系统结构带来很多麻烦</strong>，我们可以在访问此对象时加上一个对此对象的访问层。</p><!--  more --><p>何时使用：想在访问一个类时做一些控制。</p><p>如何解决：增加中间层。</p><p>关键代码：实现与被代理类组合。</p><p>应用实例： 1、<strong>Windows 里面的快捷方式</strong>。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、<strong>一张支票或银行存单是账户中资金的代理</strong>。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、<strong>spring aop</strong>。</p><p>优点： 1、职责清晰。 2、高扩展性。 3、智能化。</p><p>缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式<strong>可能会造成请求的处理速度变慢</strong>。 2、实现代理模式需要额外的工作，<strong>有些代理模式的实现非常复杂</strong>。</p><p>使用场景：按职责来划分，通常有以下使用场景： 1、<strong>远程代理</strong>。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、<strong>防火墙</strong>（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p><p>注意事项： <strong>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</strong></p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p><p>ProxyPatternDemo，我们的演示类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。<br><img src="https://i.loli.net/2020/08/17/w7lyXZgEWQMHRvY.jpg" alt="proxy_pattern_uml_diagram.jpg"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DP;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description 代理模式</span></span><br><span class="line"><span class="comment"> * Author cloudr</span></span><br><span class="line"><span class="comment"> * Date 2020/8/17 22:55</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Agent</span>().doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RelSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Agent</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RelSubject subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Agent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.subject = (RelSubject)<span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;DP.RelSubject&quot;</span>).newInstance(); <span class="comment">//使用类加载器加载</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goToWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上班&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goOffWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下班&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>&#123;</span><br><span class="line">        goToWork();</span><br><span class="line">        subject.doWork();;</span><br><span class="line">        goOffWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div style="margin-left: 5px  font-size:16px;">[1]<a href="https://www.runoob.com/design-pattern/proxy-pattern.html">https://www.runoob.com/design-pattern/proxy-pattern.html</a><br>[2]<a href="五分钟学设计模式.11.代理模式">https://www.bilibili.com/video/BV15V411z7nD</a><br></div> ]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;意图：为其他对象提供一种代理以&lt;strong&gt;控制对这个对象的访问&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代理模式和装</summary>
      
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="DesignMode" scheme="https://wyatt.ink/tags/DesignMode/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://wyatt.ink/posts/Code/168b5985.html"/>
    <id>https://wyatt.ink/posts/Code/168b5985.html</id>
    <published>2020-08-14T13:59:10.000Z</published>
    <updated>2022-04-21T08:19:35.070Z</updated>
    
    <content type="html"><![CDATA[<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。<br>使用场景：</p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br></li></ul><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.interfaces.PBEKey;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * Author cloudr</span></span><br><span class="line"><span class="comment"> * Date 2020/8/14 21:03</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> single;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Reader&gt; readers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSingle</span><span class="params">(<span class="type">int</span> single)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.single = single;</span><br><span class="line">        notifyAllReader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSingle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">addReader</span><span class="params">(Reader reader)</span>&#123;</span><br><span class="line">        readers.add(reader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Reader reader : readers) &#123;</span><br><span class="line">            reader.doSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>   <span class="title class_">Reader</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">Publish</span> <span class="variable">publish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Publish</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadA</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadA</span><span class="params">(Publish publish)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.publish = publish;</span><br><span class="line">        <span class="built_in">this</span>.publish.addReader(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m A, single =&quot;</span> + publish.getSingle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadB</span> <span class="keyword">extends</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadB</span><span class="params">(Publish publish)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.publish = publish;</span><br><span class="line">        <span class="built_in">this</span>.publish.addReader(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m B, single =&quot;</span>+ publish.getSingle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublishReaderDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Publish</span> <span class="variable">publish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Publish</span>();</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">readerA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadA</span>(publish);</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">readerB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadA</span>(publish);</span><br><span class="line">        publish.setSingle(<span class="number">1</span>);</span><br><span class="line">        publish.setSingle(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><div style="margin-left: 5px  font-size:16px;">[1]<a href="https://www.runoob.com/design-pattern/observer-pattern.html">https://www.runoob.com/design-pattern/observer-pattern.html</a><br></div> ]]></content>
    
    
    <summary type="html">&lt;p&gt;当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。&lt;br&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。&lt;/li&gt;
&lt;li&gt;一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。&lt;/li&gt;
&lt;li&gt;一个对象必须通知其他对象，而并不知道这些对象是谁。&lt;/li&gt;
&lt;li&gt;需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Code" scheme="https://wyatt.ink/categories/Code/"/>
    
    
    <category term="DesignMode" scheme="https://wyatt.ink/tags/DesignMode/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://wyatt.ink/posts/Airthmetic/f89cb603q.html"/>
    <id>https://wyatt.ink/posts/Airthmetic/f89cb603q.html</id>
    <published>2020-08-01T14:55:10.000Z</published>
    <updated>2022-05-11T13:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<div style="width: 95%">![左右旋转](https://cdn.jsdelivr.net/gh/cloud-r/GitakRepository/static_files/blog/img/左右旋.png)</div><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1tE411f7tP?p=3">程序员司马讲解二叉树(B站)</a><br><strong>遍历-&gt;二分法-&gt;二叉树-&gt;二叉查找树-&gt;红黑树(自平衡的二叉查找树)-&gt;二叉平衡树(理想状态)</strong></p><h2 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质"></a>红黑树性质</h2><ul><li>每一个结点不是红色就是黑色</li><li>红色结点不能够连接在一起</li><li>根节点必须为黑色</li><li>叶子结点均为黑色<blockquote><p>注意最后一个是NULL,所以表面上叶子结点为红色，但其实是没有问题的</p></blockquote></li></ul><h2 id="红黑树的变换规则"><a href="#红黑树的变换规则" class="headerlink" title="红黑树的变换规则"></a>红黑树的变换规则</h2><p>所有插入的点默认都是红色，否则全黑色就是普通二叉树了，下一步也就无法按照规律变换以达到自平衡。</p><ol><li>变色规则<br> 当前结点是红色，父结点是红色，且它的叔叔结点也是红色(<strong>自红，父红，叔叔红</strong>)<ol><li>把父结点设为黑色    </li><li>把叔叔结点设为黑色   </li><li>把祖父结点设为红色         </li><li>把指针结点定义到祖父结点设为当前要操作的，分析的点变换的规则（此时可能是要左右旋）</li></ol></li><li>左旋</li></ol><ul><li>当前结点是右子树，且是红色      </li><li>父结点是红色     </li><li>叔叔结点是黑色（<strong>右红，父红，叔叔黑</strong>）<br>以<strong>父结点</strong>左旋</li></ul><ol start="3"><li>右旋<br>当前节结点是左子树，红色，父结点红色，叔叔黑色。（<strong>左红，父红，叔叔黑</strong>）</li></ol><ul><li>把父结点变为黑色    </li><li>把祖父变为红色    </li><li>以<strong>祖父为结点</strong>右旋</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div style="margin-left: 5px  font-size:16px;"><a href="https://www.bilibili.com/video/BV1tE411f7tP?p=3">https://www.bilibili.com/video/BV1tE411f7tP?p=3</a><br></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;width: 95%&quot;&gt;
![左右旋转](https://cdn.jsdelivr.net/gh/cloud-r/GitakRepository/static_files/blog/img/左右旋.png)
&lt;/div&gt;</summary>
    
    
    
    <category term="Airthmetic" scheme="https://wyatt.ink/categories/Airthmetic/"/>
    
    
    <category term="数据结构" scheme="https://wyatt.ink/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
